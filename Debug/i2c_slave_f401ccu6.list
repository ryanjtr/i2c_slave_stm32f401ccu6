
i2c_slave_f401ccu6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002a8c  08002a8c  00003a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af0  08002af0  00004054  2**0
                  CONTENTS
  4 .ARM          00000008  08002af0  08002af0  00003af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002af8  08002af8  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002af8  08002af8  00003af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002afc  08002afc  00003afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08002b00  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  08002b54  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002b54  000041c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e09  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013dc  00000000  00000000  00008e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  0000a270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000479  00000000  00000000  0000a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011480  00000000  00000000  0000ad19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005832  00000000  00000000  0001c199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000607f4  00000000  00000000  000219cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000821bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d38  00000000  00000000  00082204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00083f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002a74 	.word	0x08002a74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08002a74 	.word	0x08002a74

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005b2:	4a04      	ldr	r2, [pc, #16]	@ (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	60d3      	str	r3, [r2, #12]
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005cc:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	f003 0307 	and.w	r3, r3, #7
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db0a      	blt.n	800060e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	490c      	ldr	r1, [pc, #48]	@ (8000630 <__NVIC_SetPriority+0x4c>)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	0112      	lsls	r2, r2, #4
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	440b      	add	r3, r1
 8000608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800060c:	e00a      	b.n	8000624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4908      	ldr	r1, [pc, #32]	@ (8000634 <__NVIC_SetPriority+0x50>)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	3b04      	subs	r3, #4
 800061c:	0112      	lsls	r2, r2, #4
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	440b      	add	r3, r1
 8000622:	761a      	strb	r2, [r3, #24]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000638:	b480      	push	{r7}
 800063a:	b089      	sub	sp, #36	@ 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	f1c3 0307 	rsb	r3, r3, #7
 8000652:	2b04      	cmp	r3, #4
 8000654:	bf28      	it	cs
 8000656:	2304      	movcs	r3, #4
 8000658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3304      	adds	r3, #4
 800065e:	2b06      	cmp	r3, #6
 8000660:	d902      	bls.n	8000668 <NVIC_EncodePriority+0x30>
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3b03      	subs	r3, #3
 8000666:	e000      	b.n	800066a <NVIC_EncodePriority+0x32>
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	f04f 32ff 	mov.w	r2, #4294967295
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43da      	mvns	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	401a      	ands	r2, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000680:	f04f 31ff 	mov.w	r1, #4294967295
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43d9      	mvns	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	4313      	orrs	r3, r2
         );
}
 8000692:	4618      	mov	r0, r3
 8000694:	3724      	adds	r7, #36	@ 0x24
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80006a4:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <LL_RCC_HSI_Enable+0x1c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <LL_RCC_HSI_Enable+0x1c>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <LL_RCC_HSI_IsReady+0x20>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f003 0302 	and.w	r3, r3, #2
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	bf0c      	ite	eq
 80006d0:	2301      	moveq	r3, #1
 80006d2:	2300      	movne	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	40023800 	.word	0x40023800

080006e4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	4904      	ldr	r1, [pc, #16]	@ (800070c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80006fa:	4313      	orrs	r3, r2
 80006fc:	600b      	str	r3, [r1, #0]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <LL_RCC_SetSysClkSource+0x24>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f023 0203 	bic.w	r2, r3, #3
 8000720:	4904      	ldr	r1, [pc, #16]	@ (8000734 <LL_RCC_SetSysClkSource+0x24>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	608b      	str	r3, [r1, #8]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	40023800 	.word	0x40023800

08000738 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800073c:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <LL_RCC_GetSysClkSource+0x18>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	f003 030c 	and.w	r3, r3, #12
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <LL_RCC_SetAHBPrescaler+0x24>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000764:	4904      	ldr	r1, [pc, #16]	@ (8000778 <LL_RCC_SetAHBPrescaler+0x24>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4313      	orrs	r3, r2
 800076a:	608b      	str	r3, [r1, #8]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40023800 	.word	0x40023800

0800077c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800078c:	4904      	ldr	r1, [pc, #16]	@ (80007a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4313      	orrs	r3, r2
 8000792:	608b      	str	r3, [r1, #8]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40023800 	.word	0x40023800

080007a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80007b4:	4904      	ldr	r1, [pc, #16]	@ (80007c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	608b      	str	r3, [r1, #8]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	40023800 	.word	0x40023800

080007cc <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <LL_RCC_SetTIMPrescaler+0x28>)
 80007d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007da:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80007de:	4905      	ldr	r1, [pc, #20]	@ (80007f4 <LL_RCC_SetTIMPrescaler+0x28>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	40023800 	.word	0x40023800

080007f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <LL_RCC_PLL_Enable+0x1c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <LL_RCC_PLL_Enable+0x1c>)
 8000802:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <LL_RCC_PLL_IsReady+0x24>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000824:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000828:	bf0c      	ite	eq
 800082a:	2301      	moveq	r3, #1
 800082c:	2300      	movne	r3, #0
 800082e:	b2db      	uxtb	r3, r3
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
 800084c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000854:	4013      	ands	r3, r2
 8000856:	68f9      	ldr	r1, [r7, #12]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	4311      	orrs	r1, r2
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	0192      	lsls	r2, r2, #6
 8000860:	430a      	orrs	r2, r1
 8000862:	4908      	ldr	r1, [pc, #32]	@ (8000884 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000864:	4313      	orrs	r3, r2
 8000866:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000870:	4904      	ldr	r1, [pc, #16]	@ (8000884 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	4313      	orrs	r3, r2
 8000876:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	40023800 	.word	0x40023800
 8000888:	ffbf8000 	.word	0xffbf8000

0800088c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000894:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000896:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000898:	4907      	ldr	r1, [pc, #28]	@ (80008b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4313      	orrs	r3, r2
 800089e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80008a0:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4013      	ands	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	40023800 	.word	0x40023800

080008bc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008c8:	4907      	ldr	r1, [pc, #28]	@ (80008e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4013      	ands	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40023800 	.word	0x40023800

080008ec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008f4:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008f8:	4907      	ldr	r1, [pc, #28]	@ (8000918 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000902:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4013      	ands	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40023800 	.word	0x40023800

0800091c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <LL_FLASH_SetLatency+0x24>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f023 0207 	bic.w	r2, r3, #7
 800092c:	4904      	ldr	r1, [pc, #16]	@ (8000940 <LL_FLASH_SetLatency+0x24>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	600b      	str	r3, [r1, #0]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	40023c00 	.word	0x40023c00

08000944 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000948:	4b04      	ldr	r3, [pc, #16]	@ (800095c <LL_FLASH_GetLatency+0x18>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 0307 	and.w	r3, r3, #7
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023c00 	.word	0x40023c00

08000960 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000970:	4904      	ldr	r1, [pc, #16]	@ (8000984 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4313      	orrs	r3, r2
 8000976:	600b      	str	r3, [r1, #0]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	40007000 	.word	0x40007000

08000988 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800098c:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <LL_PWR_IsActiveFlag_VOS+0x24>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000994:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000998:	bf0c      	ite	eq
 800099a:	2301      	moveq	r3, #1
 800099c:	2300      	movne	r3, #0
 800099e:	b2db      	uxtb	r3, r3
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40007000 	.word	0x40007000

080009b0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	60da      	str	r2, [r3, #12]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	691b      	ldr	r3, [r3, #16]
 80009dc:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	615a      	str	r2, [r3, #20]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a00:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a04:	f7ff ff72 	bl	80008ec <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a08:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000a0c:	f7ff ff56 	bl	80008bc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f7ff fdb5 	bl	8000580 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 8000a16:	f7ff fdd7 	bl	80005c8 <__NVIC_GetPriorityGrouping>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	210f      	movs	r1, #15
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fe09 	bl	8000638 <NVIC_EncodePriority>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2e:	f7ff fdd9 	bl	80005e4 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 f80f 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a36:	f000 f8ab 	bl	8000b90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a3a:	f000 f859 	bl	8000af0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  I2C_Bitbang_Init();
 8000a3e:	f001 f99f 	bl	8001d80 <I2C_Bitbang_Init>
  uart_printf("slave\r\n");
 8000a42:	4803      	ldr	r0, [pc, #12]	@ (8000a50 <main+0x54>)
 8000a44:	f001 fb4a 	bl	80020dc <uart_printf>
  DWT_Clock_Enable();
 8000a48:	f001 f97a 	bl	8001d40 <DWT_Clock_Enable>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <main+0x50>
 8000a50:	08002a8c 	.word	0x08002a8c

08000a54 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f7ff ff5f 	bl	800091c <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ff70 	bl	8000944 <LL_FLASH_GetLatency>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d1fa      	bne.n	8000a60 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000a6a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000a6e:	f7ff ff77 	bl	8000960 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000a72:	2010      	movs	r0, #16
 8000a74:	f7ff fe36 	bl	80006e4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000a78:	f7ff fe12 	bl	80006a0 <LL_RCC_HSI_Enable>

  /* Wait till HSI is ready */
  while (LL_RCC_HSI_IsReady() != 1)
 8000a7c:	bf00      	nop
 8000a7e:	f7ff fe1f 	bl	80006c0 <LL_RCC_HSI_IsReady>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d1fa      	bne.n	8000a7e <SystemClock_Config+0x2a>
  {
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 84, LL_RCC_PLLP_DIV_2);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	2254      	movs	r2, #84	@ 0x54
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff fed6 	bl	8000840 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a94:	f7ff feb0 	bl	80007f8 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 1)
 8000a98:	bf00      	nop
 8000a9a:	f7ff febd 	bl	8000818 <LL_RCC_PLL_IsReady>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d1fa      	bne.n	8000a9a <SystemClock_Config+0x46>
  {
  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000aa4:	bf00      	nop
 8000aa6:	f7ff ff6f 	bl	8000988 <LL_PWR_IsActiveFlag_VOS>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0fa      	beq.n	8000aa6 <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff fe4f 	bl	8000754 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000ab6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000aba:	f7ff fe5f 	bl	800077c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff fe70 	bl	80007a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f7ff fe23 	bl	8000710 <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000aca:	bf00      	nop
 8000acc:	f7ff fe34 	bl	8000738 <LL_RCC_GetSysClkSource>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b08      	cmp	r3, #8
 8000ad4:	d1fa      	bne.n	8000acc <SystemClock_Config+0x78>
  {
  }
  LL_Init1msTick(84000000);
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <SystemClock_Config+0x98>)
 8000ad8:	f000 ff32 	bl	8001940 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8000adc:	4803      	ldr	r0, [pc, #12]	@ (8000aec <SystemClock_Config+0x98>)
 8000ade:	f000 ff3d 	bl	800195c <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff fe72 	bl	80007cc <LL_RCC_SetTIMPrescaler>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	0501bd00 	.word	0x0501bd00

08000af0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	@ 0x38
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000b1a:	2010      	movs	r0, #16
 8000b1c:	f7ff fee6 	bl	80008ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff feb3 	bl	800088c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10;
 8000b26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	4810      	ldr	r0, [pc, #64]	@ (8000b88 <MX_USART1_UART_Init+0x98>)
 8000b46:	f000 fa59 	bl	8000ffc <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000b4a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000b4e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b64:	2300      	movs	r3, #0
 8000b66:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4807      	ldr	r0, [pc, #28]	@ (8000b8c <MX_USART1_UART_Init+0x9c>)
 8000b70:	f000 fe68 	bl	8001844 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <MX_USART1_UART_Init+0x9c>)
 8000b76:	f7ff ff2b 	bl	80009d0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000b7a:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <MX_USART1_UART_Init+0x9c>)
 8000b7c:	f7ff ff18 	bl	80009b0 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000b80:	bf00      	nop
 8000b82:	3738      	adds	r7, #56	@ 0x38
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40011000 	.word	0x40011000

08000b90 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000b94:	2080      	movs	r0, #128	@ 0x80
 8000b96:	f7ff fe79 	bl	800088c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff fe76 	bl	800088c <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000bac:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000bae:	695a      	ldr	r2, [r3, #20]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	bf0c      	ite	eq
 8000bba:	2301      	moveq	r3, #1
 8000bbc:	2300      	movne	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40013c00 	.word	0x40013c00

08000bd0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6153      	str	r3, [r2, #20]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40013c00 	.word	0x40013c00

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <MemManage_Handler+0x4>

08000c08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <EXTI9_5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

    if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6)) {
 8000c54:	2040      	movs	r0, #64	@ 0x40
 8000c56:	f7ff ffa5 	bl	8000ba4 <LL_EXTI_IsActiveFlag_0_31>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d004      	beq.n	8000c6a <EXTI9_5_IRQHandler+0x1a>
        I2C_Event_Take();
 8000c60:	f001 f98e 	bl	8001f80 <I2C_Event_Take>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8000c64:	2040      	movs	r0, #64	@ 0x40
 8000c66:	f7ff ffb3 	bl	8000bd0 <LL_EXTI_ClearFlag_0_31>
    }
    if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7))
 8000c6a:	2080      	movs	r0, #128	@ 0x80
 8000c6c:	f7ff ff9a 	bl	8000ba4 <LL_EXTI_IsActiveFlag_0_31>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d004      	beq.n	8000c80 <EXTI9_5_IRQHandler+0x30>
        {
    		check_start_condition();
 8000c76:	f001 f96b 	bl	8001f50 <check_start_condition>
            LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8000c7a:	2080      	movs	r0, #128	@ 0x80
 8000c7c:	f7ff ffa8 	bl	8000bd0 <LL_EXTI_ClearFlag_0_31>
        }
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	@ (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f001 fa66 	bl	8002184 <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20010000 	.word	0x20010000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	20000070 	.word	0x20000070
 8000cec:	200001c0 	.word	0x200001c0

08000cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	@ (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d18:	f7ff ffea 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	@ (8000d54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	@ (8000d58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	@ (8000d60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d42:	f001 fa25 	bl	8002190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff fe59 	bl	80009fc <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d4c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000d58:	08002b00 	.word	0x08002b00
  ldr r2, =_sbss
 8000d5c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000d60:	200001c0 	.word	0x200001c0

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>

08000d66 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b08b      	sub	sp, #44	@ 0x2c
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000d8c:	2320      	movs	r3, #32
 8000d8e:	e003      	b.n	8000d98 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fab3 f383 	clz	r3, r3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2103      	movs	r1, #3
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	401a      	ands	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da8:	6a3b      	ldr	r3, [r7, #32]
 8000daa:	fa93 f3a3 	rbit	r3, r3
 8000dae:	61fb      	str	r3, [r7, #28]
  return result;
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000dba:	2320      	movs	r3, #32
 8000dbc:	e003      	b.n	8000dc6 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	372c      	adds	r7, #44	@ 0x2c
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	401a      	ands	r2, r3
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	fb01 f303 	mul.w	r3, r1, r3
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	605a      	str	r2, [r3, #4]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b08b      	sub	sp, #44	@ 0x2c
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	613b      	str	r3, [r7, #16]
  return result;
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000e36:	2320      	movs	r3, #32
 8000e38:	e003      	b.n	8000e42 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	fab3 f383 	clz	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2103      	movs	r1, #3
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	fa93 f3a3 	rbit	r3, r3
 8000e58:	61fb      	str	r3, [r7, #28]
  return result;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000e64:	2320      	movs	r3, #32
 8000e66:	e003      	b.n	8000e70 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6a:	fab3 f383 	clz	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000e7e:	bf00      	nop
 8000e80:	372c      	adds	r7, #44	@ 0x2c
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b08b      	sub	sp, #44	@ 0x2c
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	613b      	str	r3, [r7, #16]
  return result;
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	e003      	b.n	8000ebc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	fa93 f3a3 	rbit	r3, r3
 8000ed2:	61fb      	str	r3, [r7, #28]
  return result;
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000ede:	2320      	movs	r3, #32
 8000ee0:	e003      	b.n	8000eea <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	fab3 f383 	clz	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	60da      	str	r2, [r3, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	372c      	adds	r7, #44	@ 0x2c
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b08b      	sub	sp, #44	@ 0x2c
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6a1a      	ldr	r2, [r3, #32]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	613b      	str	r3, [r7, #16]
  return result;
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000f2a:	2320      	movs	r3, #32
 8000f2c:	e003      	b.n	8000f36 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	fab3 f383 	clz	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	210f      	movs	r1, #15
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	401a      	ands	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	fa93 f3a3 	rbit	r3, r3
 8000f4c:	61fb      	str	r3, [r7, #28]
  return result;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000f58:	2320      	movs	r3, #32
 8000f5a:	e003      	b.n	8000f64 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5e:	fab3 f383 	clz	r3, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000f72:	bf00      	nop
 8000f74:	372c      	adds	r7, #44	@ 0x2c
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b08b      	sub	sp, #44	@ 0x2c
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	613b      	str	r3, [r7, #16]
  return result;
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	e003      	b.n	8000fb2 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	fab3 f383 	clz	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	210f      	movs	r1, #15
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
 8000fc6:	fa93 f3a3 	rbit	r3, r3
 8000fca:	61fb      	str	r3, [r7, #28]
  return result;
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	e003      	b.n	8000fe2 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fdc:	fab3 f383 	clz	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	431a      	orrs	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000ff0:	bf00      	nop
 8000ff2:	372c      	adds	r7, #44	@ 0x2c
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	617b      	str	r3, [r7, #20]
  return result;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <LL_GPIO_Init+0x2e>
    return 32U;
 8001026:	2320      	movs	r3, #32
 8001028:	e003      	b.n	8001032 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fab3 f383 	clz	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001034:	e057      	b.n	80010e6 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	2101      	movs	r1, #1
 800103c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	4013      	ands	r3, r2
 8001044:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d049      	beq.n	80010e0 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d003      	beq.n	800105c <LL_GPIO_Init+0x60>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d10d      	bne.n	8001078 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	461a      	mov	r2, r3
 8001062:	6a39      	ldr	r1, [r7, #32]
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fed3 	bl	8000e10 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	461a      	mov	r2, r3
 8001070:	6a39      	ldr	r1, [r7, #32]
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff feb4 	bl	8000de0 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	461a      	mov	r2, r3
 800107e:	6a39      	ldr	r1, [r7, #32]
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff02 	bl	8000e8a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d121      	bne.n	80010d2 <LL_GPIO_Init+0xd6>
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	60bb      	str	r3, [r7, #8]
  return result;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <LL_GPIO_Init+0xac>
    return 32U;
 80010a4:	2320      	movs	r3, #32
 80010a6:	e003      	b.n	80010b0 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80010b0:	2b07      	cmp	r3, #7
 80010b2:	d807      	bhi.n	80010c4 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	461a      	mov	r2, r3
 80010ba:	6a39      	ldr	r1, [r7, #32]
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff21 	bl	8000f04 <LL_GPIO_SetAFPin_0_7>
 80010c2:	e006      	b.n	80010d2 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6a39      	ldr	r1, [r7, #32]
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff56 	bl	8000f7e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	461a      	mov	r2, r3
 80010d8:	6a39      	ldr	r1, [r7, #32]
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fe43 	bl	8000d66 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	3301      	adds	r3, #1
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	fa22 f303 	lsr.w	r3, r2, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1a0      	bne.n	8001036 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3728      	adds	r7, #40	@ 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <LL_RCC_GetSysClkSource>:
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <LL_RCC_GetSysClkSource+0x18>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 030c 	and.w	r3, r3, #12
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <LL_RCC_GetAHBPrescaler>:
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001120:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <LL_RCC_GetAHBPrescaler+0x18>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <LL_RCC_GetAPB1Prescaler>:
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <LL_RCC_GetAPB1Prescaler+0x18>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <LL_RCC_GetAPB2Prescaler>:
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <LL_RCC_GetAPB2Prescaler+0x18>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001174:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <LL_RCC_PLL_GetMainSource+0x18>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <LL_RCC_PLL_GetN+0x18>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	099b      	lsrs	r3, r3, #6
 8001196:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40023800 	.word	0x40023800

080011a8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <LL_RCC_PLL_GetP+0x18>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <LL_RCC_PLL_GetDivider+0x18>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80011e8:	f000 f820 	bl	800122c <RCC_GetSystemClockFreq>
 80011ec:	4602      	mov	r2, r0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f840 	bl	800127c <RCC_GetHCLKClockFreq>
 80011fc:	4602      	mov	r2, r0
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f84e 	bl	80012a8 <RCC_GetPCLK1ClockFreq>
 800120c:	4602      	mov	r2, r0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f85a 	bl	80012d0 <RCC_GetPCLK2ClockFreq>
 800121c:	4602      	mov	r2, r0
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60da      	str	r2, [r3, #12]
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001236:	f7ff ff63 	bl	8001100 <LL_RCC_GetSysClkSource>
 800123a:	4603      	mov	r3, r0
 800123c:	2b08      	cmp	r3, #8
 800123e:	d00c      	beq.n	800125a <RCC_GetSystemClockFreq+0x2e>
 8001240:	2b08      	cmp	r3, #8
 8001242:	d80f      	bhi.n	8001264 <RCC_GetSystemClockFreq+0x38>
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <RCC_GetSystemClockFreq+0x22>
 8001248:	2b04      	cmp	r3, #4
 800124a:	d003      	beq.n	8001254 <RCC_GetSystemClockFreq+0x28>
 800124c:	e00a      	b.n	8001264 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800124e:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <RCC_GetSystemClockFreq+0x48>)
 8001250:	607b      	str	r3, [r7, #4]
      break;
 8001252:	e00a      	b.n	800126a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <RCC_GetSystemClockFreq+0x4c>)
 8001256:	607b      	str	r3, [r7, #4]
      break;
 8001258:	e007      	b.n	800126a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800125a:	2008      	movs	r0, #8
 800125c:	f000 f84c 	bl	80012f8 <RCC_PLL_GetFreqDomain_SYS>
 8001260:	6078      	str	r0, [r7, #4]
      break;
 8001262:	e002      	b.n	800126a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <RCC_GetSystemClockFreq+0x48>)
 8001266:	607b      	str	r3, [r7, #4]
      break;
 8001268:	bf00      	nop
  }

  return frequency;
 800126a:	687b      	ldr	r3, [r7, #4]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	00f42400 	.word	0x00f42400
 8001278:	017d7840 	.word	0x017d7840

0800127c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001284:	f7ff ff4a 	bl	800111c <LL_RCC_GetAHBPrescaler>
 8001288:	4603      	mov	r3, r0
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <RCC_GetHCLKClockFreq+0x28>)
 8001292:	5cd3      	ldrb	r3, [r2, r3]
 8001294:	461a      	mov	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	40d3      	lsrs	r3, r2
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	08002aa4 	.word	0x08002aa4

080012a8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80012b0:	f7ff ff42 	bl	8001138 <LL_RCC_GetAPB1Prescaler>
 80012b4:	4603      	mov	r3, r0
 80012b6:	0a9b      	lsrs	r3, r3, #10
 80012b8:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <RCC_GetPCLK1ClockFreq+0x24>)
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
 80012bc:	461a      	mov	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	40d3      	lsrs	r3, r2
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	08002ab4 	.word	0x08002ab4

080012d0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80012d8:	f7ff ff3c 	bl	8001154 <LL_RCC_GetAPB2Prescaler>
 80012dc:	4603      	mov	r3, r0
 80012de:	0b5b      	lsrs	r3, r3, #13
 80012e0:	4a04      	ldr	r2, [pc, #16]	@ (80012f4 <RCC_GetPCLK2ClockFreq+0x24>)
 80012e2:	5cd3      	ldrb	r3, [r2, r3]
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	40d3      	lsrs	r3, r2
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	08002ab4 	.word	0x08002ab4

080012f8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800130c:	f7ff ff30 	bl	8001170 <LL_RCC_PLL_GetMainSource>
 8001310:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d004      	beq.n	8001322 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800131e:	d003      	beq.n	8001328 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001320:	e005      	b.n	800132e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001324:	617b      	str	r3, [r7, #20]
      break;
 8001326:	e005      	b.n	8001334 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800132a:	617b      	str	r3, [r7, #20]
      break;
 800132c:	e002      	b.n	8001334 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001330:	617b      	str	r3, [r7, #20]
      break;
 8001332:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b08      	cmp	r3, #8
 8001338:	d113      	bne.n	8001362 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800133a:	f7ff ff43 	bl	80011c4 <LL_RCC_PLL_GetDivider>
 800133e:	4602      	mov	r2, r0
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fbb3 f4f2 	udiv	r4, r3, r2
 8001346:	f7ff ff21 	bl	800118c <LL_RCC_PLL_GetN>
 800134a:	4603      	mov	r3, r0
 800134c:	fb03 f404 	mul.w	r4, r3, r4
 8001350:	f7ff ff2a 	bl	80011a8 <LL_RCC_PLL_GetP>
 8001354:	4603      	mov	r3, r0
 8001356:	0c1b      	lsrs	r3, r3, #16
 8001358:	3301      	adds	r3, #1
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001360:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001362:	693b      	ldr	r3, [r7, #16]
}
 8001364:	4618      	mov	r0, r3
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd90      	pop	{r4, r7, pc}
 800136c:	00f42400 	.word	0x00f42400
 8001370:	017d7840 	.word	0x017d7840

08001374 <LL_USART_IsEnabled>:
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001388:	bf0c      	ite	eq
 800138a:	2301      	moveq	r3, #1
 800138c:	2300      	movne	r3, #0
 800138e:	b2db      	uxtb	r3, r3
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_USART_SetStopBitsLength>:
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	611a      	str	r2, [r3, #16]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_USART_SetHWFlowCtrl>:
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	615a      	str	r2, [r3, #20]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_USART_SetBaudRate>:
{
 80013e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ec:	b0c0      	sub	sp, #256	@ 0x100
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80013f4:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80013f8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80013fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001408:	f040 810c 	bne.w	8001624 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800140c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001410:	2200      	movs	r2, #0
 8001412:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001416:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800141a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800141e:	4622      	mov	r2, r4
 8001420:	462b      	mov	r3, r5
 8001422:	1891      	adds	r1, r2, r2
 8001424:	6639      	str	r1, [r7, #96]	@ 0x60
 8001426:	415b      	adcs	r3, r3
 8001428:	667b      	str	r3, [r7, #100]	@ 0x64
 800142a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800142e:	4621      	mov	r1, r4
 8001430:	eb12 0801 	adds.w	r8, r2, r1
 8001434:	4629      	mov	r1, r5
 8001436:	eb43 0901 	adc.w	r9, r3, r1
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800144a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800144e:	4690      	mov	r8, r2
 8001450:	4699      	mov	r9, r3
 8001452:	4623      	mov	r3, r4
 8001454:	eb18 0303 	adds.w	r3, r8, r3
 8001458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800145c:	462b      	mov	r3, r5
 800145e:	eb49 0303 	adc.w	r3, r9, r3
 8001462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001466:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800146a:	2200      	movs	r2, #0
 800146c:	469a      	mov	sl, r3
 800146e:	4693      	mov	fp, r2
 8001470:	eb1a 030a 	adds.w	r3, sl, sl
 8001474:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001476:	eb4b 030b 	adc.w	r3, fp, fp
 800147a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800147c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001480:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001484:	f7fe ff04 	bl	8000290 <__aeabi_uldivmod>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4b64      	ldr	r3, [pc, #400]	@ (8001620 <LL_USART_SetBaudRate+0x238>)
 800148e:	fba3 2302 	umull	r2, r3, r3, r2
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	b29b      	uxth	r3, r3
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	b29c      	uxth	r4, r3
 800149a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80014a4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80014a8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80014ac:	4642      	mov	r2, r8
 80014ae:	464b      	mov	r3, r9
 80014b0:	1891      	adds	r1, r2, r2
 80014b2:	6539      	str	r1, [r7, #80]	@ 0x50
 80014b4:	415b      	adcs	r3, r3
 80014b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80014b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80014bc:	4641      	mov	r1, r8
 80014be:	1851      	adds	r1, r2, r1
 80014c0:	64b9      	str	r1, [r7, #72]	@ 0x48
 80014c2:	4649      	mov	r1, r9
 80014c4:	414b      	adcs	r3, r1
 80014c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80014d4:	4659      	mov	r1, fp
 80014d6:	00cb      	lsls	r3, r1, #3
 80014d8:	4651      	mov	r1, sl
 80014da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014de:	4651      	mov	r1, sl
 80014e0:	00ca      	lsls	r2, r1, #3
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	4642      	mov	r2, r8
 80014ea:	189b      	adds	r3, r3, r2
 80014ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80014f0:	464b      	mov	r3, r9
 80014f2:	460a      	mov	r2, r1
 80014f4:	eb42 0303 	adc.w	r3, r2, r3
 80014f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80014fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001500:	2200      	movs	r2, #0
 8001502:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001506:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800150a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800150e:	460b      	mov	r3, r1
 8001510:	18db      	adds	r3, r3, r3
 8001512:	643b      	str	r3, [r7, #64]	@ 0x40
 8001514:	4613      	mov	r3, r2
 8001516:	eb42 0303 	adc.w	r3, r2, r3
 800151a:	647b      	str	r3, [r7, #68]	@ 0x44
 800151c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001520:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001524:	f7fe feb4 	bl	8000290 <__aeabi_uldivmod>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4611      	mov	r1, r2
 800152e:	4b3c      	ldr	r3, [pc, #240]	@ (8001620 <LL_USART_SetBaudRate+0x238>)
 8001530:	fba3 2301 	umull	r2, r3, r3, r1
 8001534:	095b      	lsrs	r3, r3, #5
 8001536:	2264      	movs	r2, #100	@ 0x64
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	1acb      	subs	r3, r1, r3
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001544:	4b36      	ldr	r3, [pc, #216]	@ (8001620 <LL_USART_SetBaudRate+0x238>)
 8001546:	fba3 2302 	umull	r2, r3, r3, r2
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	b29b      	uxth	r3, r3
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b29b      	uxth	r3, r3
 8001552:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001556:	b29b      	uxth	r3, r3
 8001558:	4423      	add	r3, r4
 800155a:	b29c      	uxth	r4, r3
 800155c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001560:	2200      	movs	r2, #0
 8001562:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001566:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800156a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800156e:	4642      	mov	r2, r8
 8001570:	464b      	mov	r3, r9
 8001572:	1891      	adds	r1, r2, r2
 8001574:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001576:	415b      	adcs	r3, r3
 8001578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800157a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800157e:	4641      	mov	r1, r8
 8001580:	1851      	adds	r1, r2, r1
 8001582:	6339      	str	r1, [r7, #48]	@ 0x30
 8001584:	4649      	mov	r1, r9
 8001586:	414b      	adcs	r3, r1
 8001588:	637b      	str	r3, [r7, #52]	@ 0x34
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001596:	4659      	mov	r1, fp
 8001598:	00cb      	lsls	r3, r1, #3
 800159a:	4651      	mov	r1, sl
 800159c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015a0:	4651      	mov	r1, sl
 80015a2:	00ca      	lsls	r2, r1, #3
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	4603      	mov	r3, r0
 80015aa:	4642      	mov	r2, r8
 80015ac:	189b      	adds	r3, r3, r2
 80015ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80015b2:	464b      	mov	r3, r9
 80015b4:	460a      	mov	r2, r1
 80015b6:	eb42 0303 	adc.w	r3, r2, r3
 80015ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80015be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80015c2:	2200      	movs	r2, #0
 80015c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80015c8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80015cc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80015d0:	460b      	mov	r3, r1
 80015d2:	18db      	adds	r3, r3, r3
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015d6:	4613      	mov	r3, r2
 80015d8:	eb42 0303 	adc.w	r3, r2, r3
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015e2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80015e6:	f7fe fe53 	bl	8000290 <__aeabi_uldivmod>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <LL_USART_SetBaudRate+0x238>)
 80015f0:	fba3 1302 	umull	r1, r3, r3, r2
 80015f4:	095b      	lsrs	r3, r3, #5
 80015f6:	2164      	movs	r1, #100	@ 0x64
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	3332      	adds	r3, #50	@ 0x32
 8001602:	4a07      	ldr	r2, [pc, #28]	@ (8001620 <LL_USART_SetBaudRate+0x238>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	095b      	lsrs	r3, r3, #5
 800160a:	b29b      	uxth	r3, r3
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	b29b      	uxth	r3, r3
 8001612:	4423      	add	r3, r4
 8001614:	b29b      	uxth	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800161c:	609a      	str	r2, [r3, #8]
}
 800161e:	e108      	b.n	8001832 <LL_USART_SetBaudRate+0x44a>
 8001620:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001624:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001628:	2200      	movs	r2, #0
 800162a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800162e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001632:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001636:	4642      	mov	r2, r8
 8001638:	464b      	mov	r3, r9
 800163a:	1891      	adds	r1, r2, r2
 800163c:	6239      	str	r1, [r7, #32]
 800163e:	415b      	adcs	r3, r3
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
 8001642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001646:	4641      	mov	r1, r8
 8001648:	1854      	adds	r4, r2, r1
 800164a:	4649      	mov	r1, r9
 800164c:	eb43 0501 	adc.w	r5, r3, r1
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	00eb      	lsls	r3, r5, #3
 800165a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800165e:	00e2      	lsls	r2, r4, #3
 8001660:	4614      	mov	r4, r2
 8001662:	461d      	mov	r5, r3
 8001664:	4643      	mov	r3, r8
 8001666:	18e3      	adds	r3, r4, r3
 8001668:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800166c:	464b      	mov	r3, r9
 800166e:	eb45 0303 	adc.w	r3, r5, r3
 8001672:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001676:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800167a:	2200      	movs	r2, #0
 800167c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001680:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001690:	4629      	mov	r1, r5
 8001692:	008b      	lsls	r3, r1, #2
 8001694:	4621      	mov	r1, r4
 8001696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800169a:	4621      	mov	r1, r4
 800169c:	008a      	lsls	r2, r1, #2
 800169e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80016a2:	f7fe fdf5 	bl	8000290 <__aeabi_uldivmod>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4b65      	ldr	r3, [pc, #404]	@ (8001840 <LL_USART_SetBaudRate+0x458>)
 80016ac:	fba3 2302 	umull	r2, r3, r3, r2
 80016b0:	095b      	lsrs	r3, r3, #5
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	b29c      	uxth	r4, r3
 80016b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80016bc:	2200      	movs	r2, #0
 80016be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80016c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80016c6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80016ca:	4642      	mov	r2, r8
 80016cc:	464b      	mov	r3, r9
 80016ce:	1891      	adds	r1, r2, r2
 80016d0:	61b9      	str	r1, [r7, #24]
 80016d2:	415b      	adcs	r3, r3
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016da:	4641      	mov	r1, r8
 80016dc:	1851      	adds	r1, r2, r1
 80016de:	6139      	str	r1, [r7, #16]
 80016e0:	4649      	mov	r1, r9
 80016e2:	414b      	adcs	r3, r1
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016f2:	4659      	mov	r1, fp
 80016f4:	00cb      	lsls	r3, r1, #3
 80016f6:	4651      	mov	r1, sl
 80016f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016fc:	4651      	mov	r1, sl
 80016fe:	00ca      	lsls	r2, r1, #3
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	4603      	mov	r3, r0
 8001706:	4642      	mov	r2, r8
 8001708:	189b      	adds	r3, r3, r2
 800170a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800170e:	464b      	mov	r3, r9
 8001710:	460a      	mov	r2, r1
 8001712:	eb42 0303 	adc.w	r3, r2, r3
 8001716:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800171a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800171e:	2200      	movs	r2, #0
 8001720:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001724:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8001734:	4649      	mov	r1, r9
 8001736:	008b      	lsls	r3, r1, #2
 8001738:	4641      	mov	r1, r8
 800173a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800173e:	4641      	mov	r1, r8
 8001740:	008a      	lsls	r2, r1, #2
 8001742:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001746:	f7fe fda3 	bl	8000290 <__aeabi_uldivmod>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4611      	mov	r1, r2
 8001750:	4b3b      	ldr	r3, [pc, #236]	@ (8001840 <LL_USART_SetBaudRate+0x458>)
 8001752:	fba3 2301 	umull	r2, r3, r3, r1
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2264      	movs	r2, #100	@ 0x64
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	1acb      	subs	r3, r1, r3
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	3332      	adds	r3, #50	@ 0x32
 8001764:	4a36      	ldr	r2, [pc, #216]	@ (8001840 <LL_USART_SetBaudRate+0x458>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	b29b      	uxth	r3, r3
 800176e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001772:	b29b      	uxth	r3, r3
 8001774:	4423      	add	r3, r4
 8001776:	b29c      	uxth	r4, r3
 8001778:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800177c:	2200      	movs	r2, #0
 800177e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001780:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001782:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001786:	4642      	mov	r2, r8
 8001788:	464b      	mov	r3, r9
 800178a:	1891      	adds	r1, r2, r2
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	415b      	adcs	r3, r3
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001796:	4641      	mov	r1, r8
 8001798:	1851      	adds	r1, r2, r1
 800179a:	6039      	str	r1, [r7, #0]
 800179c:	4649      	mov	r1, r9
 800179e:	414b      	adcs	r3, r1
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80017ae:	4659      	mov	r1, fp
 80017b0:	00cb      	lsls	r3, r1, #3
 80017b2:	4651      	mov	r1, sl
 80017b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017b8:	4651      	mov	r1, sl
 80017ba:	00ca      	lsls	r2, r1, #3
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	4603      	mov	r3, r0
 80017c2:	4642      	mov	r2, r8
 80017c4:	189b      	adds	r3, r3, r2
 80017c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80017c8:	464b      	mov	r3, r9
 80017ca:	460a      	mov	r2, r1
 80017cc:	eb42 0303 	adc.w	r3, r2, r3
 80017d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80017d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80017d6:	2200      	movs	r2, #0
 80017d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80017e8:	4649      	mov	r1, r9
 80017ea:	008b      	lsls	r3, r1, #2
 80017ec:	4641      	mov	r1, r8
 80017ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017f2:	4641      	mov	r1, r8
 80017f4:	008a      	lsls	r2, r1, #2
 80017f6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80017fa:	f7fe fd49 	bl	8000290 <__aeabi_uldivmod>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <LL_USART_SetBaudRate+0x458>)
 8001804:	fba3 1302 	umull	r1, r3, r3, r2
 8001808:	095b      	lsrs	r3, r3, #5
 800180a:	2164      	movs	r1, #100	@ 0x64
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	3332      	adds	r3, #50	@ 0x32
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <LL_USART_SetBaudRate+0x458>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	095b      	lsrs	r3, r3, #5
 800181e:	b29b      	uxth	r3, r3
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	b29b      	uxth	r3, r3
 8001826:	4423      	add	r3, r4
 8001828:	b29b      	uxth	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001830:	609a      	str	r2, [r3, #8]
}
 8001832:	bf00      	nop
 8001834:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001838:	46bd      	mov	sp, r7
 800183a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800183e:	bf00      	nop
 8001840:	51eb851f 	.word	0x51eb851f

08001844 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fd8c 	bl	8001374 <LL_USART_IsEnabled>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d149      	bne.n	80018f6 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800186a:	f023 030c 	bic.w	r3, r3, #12
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	6851      	ldr	r1, [r2, #4]
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	68d2      	ldr	r2, [r2, #12]
 8001876:	4311      	orrs	r1, r2
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	6912      	ldr	r2, [r2, #16]
 800187c:	4311      	orrs	r1, r2
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	6992      	ldr	r2, [r2, #24]
 8001882:	430a      	orrs	r2, r1
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4619      	mov	r1, r3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fd83 	bl	800139c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	4619      	mov	r1, r3
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff fd90 	bl	80013c2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fc9a 	bl	80011e0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a14      	ldr	r2, [pc, #80]	@ (8001900 <LL_USART_Init+0xbc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d102      	bne.n	80018ba <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	e00c      	b.n	80018d4 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a11      	ldr	r2, [pc, #68]	@ (8001904 <LL_USART_Init+0xc0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d102      	bne.n	80018c8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	e005      	b.n	80018d4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001908 <LL_USART_Init+0xc4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d101      	bne.n	80018d4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00d      	beq.n	80018f6 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80018e2:	2300      	movs	r3, #0
 80018e4:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fd79 	bl	80013e8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40011000 	.word	0x40011000
 8001904:	40004400 	.word	0x40004400
 8001908:	40011400 	.word	0x40011400

0800190c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4a07      	ldr	r2, [pc, #28]	@ (800193c <LL_InitTick+0x30>)
 8001920:	3b01      	subs	r3, #1
 8001922:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	@ (800193c <LL_InitTick+0x30>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	@ (800193c <LL_InitTick+0x30>)
 800192c:	2205      	movs	r2, #5
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e010 	.word	0xe000e010

08001940 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001948:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ffdd 	bl	800190c <LL_InitTick>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001964:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <LL_SetSystemCoreClock+0x1c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000000 	.word	0x20000000

0800197c <__NVIC_EnableIRQ>:
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	2b00      	cmp	r3, #0
 800198c:	db0b      	blt.n	80019a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	4907      	ldr	r1, [pc, #28]	@ (80019b4 <__NVIC_EnableIRQ+0x38>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	2001      	movs	r0, #1
 800199e:	fa00 f202 	lsl.w	r2, r0, r2
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000e100 	.word	0xe000e100

080019b8 <__NVIC_SetPriority>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db0a      	blt.n	80019e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	490c      	ldr	r1, [pc, #48]	@ (8001a04 <__NVIC_SetPriority+0x4c>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	440b      	add	r3, r1
 80019dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019e0:	e00a      	b.n	80019f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4908      	ldr	r1, [pc, #32]	@ (8001a08 <__NVIC_SetPriority+0x50>)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	3b04      	subs	r3, #4
 80019f0:	0112      	lsls	r2, r2, #4
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	440b      	add	r3, r1
 80019f6:	761a      	strb	r2, [r3, #24]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000e100 	.word	0xe000e100
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <LL_AHB1_GRP1_EnableClock>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a18:	4907      	ldr	r1, [pc, #28]	@ (8001a38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4013      	ands	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40023800 	.word	0x40023800

08001a3c <LL_SYSCFG_SetEXTISource>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001a46:	4a17      	ldr	r2, [pc, #92]	@ (8001aa4 <LL_SYSCFG_SetEXTISource+0x68>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	43db      	mvns	r3, r3
 8001a58:	ea02 0103 	and.w	r1, r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	0c1b      	lsrs	r3, r3, #16
 8001a60:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	60fb      	str	r3, [r7, #12]
  return result;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 8001a74:	2320      	movs	r3, #32
 8001a76:	e003      	b.n	8001a80 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	fa03 f202 	lsl.w	r2, r3, r2
 8001a88:	4806      	ldr	r0, [pc, #24]	@ (8001aa4 <LL_SYSCFG_SetEXTISource+0x68>)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	3302      	adds	r3, #2
 8001a92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001a96:	bf00      	nop
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40013800 	.word	0x40013800

08001aa8 <LL_EXTI_EnableIT_0_31>:
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <LL_EXTI_EnableIT_0_31+0x20>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4904      	ldr	r1, [pc, #16]	@ (8001ac8 <LL_EXTI_EnableIT_0_31+0x20>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40013c00 	.word	0x40013c00

08001acc <LL_EXTI_DisableIT_0_31>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <LL_EXTI_DisableIT_0_31+0x24>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	4904      	ldr	r1, [pc, #16]	@ (8001af0 <LL_EXTI_DisableIT_0_31+0x24>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40013c00 	.word	0x40013c00

08001af4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4904      	ldr	r1, [pc, #16]	@ (8001b14 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40013c00 	.word	0x40013c00

08001b18 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	4904      	ldr	r1, [pc, #16]	@ (8001b38 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60cb      	str	r3, [r1, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	40013c00 	.word	0x40013c00

08001b3c <LL_GPIO_SetPinMode>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b08b      	sub	sp, #44	@ 0x2c
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	613b      	str	r3, [r7, #16]
  return result;
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001b62:	2320      	movs	r3, #32
 8001b64:	e003      	b.n	8001b6e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2103      	movs	r1, #3
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	61fb      	str	r3, [r7, #28]
  return result;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001b90:	2320      	movs	r3, #32
 8001b92:	e003      	b.n	8001b9c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	601a      	str	r2, [r3, #0]
}
 8001baa:	bf00      	nop
 8001bac:	372c      	adds	r7, #44	@ 0x2c
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_GPIO_SetPinOutputType>:
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	605a      	str	r2, [r3, #4]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_GPIO_SetPinSpeed>:
{
 8001be6:	b480      	push	{r7}
 8001be8:	b08b      	sub	sp, #44	@ 0x2c
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	613b      	str	r3, [r7, #16]
  return result;
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	e003      	b.n	8001c18 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	401a      	ands	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	61fb      	str	r3, [r7, #28]
  return result;
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	e003      	b.n	8001c46 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	609a      	str	r2, [r3, #8]
}
 8001c54:	bf00      	nop
 8001c56:	372c      	adds	r7, #44	@ 0x2c
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_GPIO_SetPinPull>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b08b      	sub	sp, #44	@ 0x2c
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	613b      	str	r3, [r7, #16]
  return result;
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001c86:	2320      	movs	r3, #32
 8001c88:	e003      	b.n	8001c92 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2103      	movs	r1, #3
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	61fb      	str	r3, [r7, #28]
  return result;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001cb4:	2320      	movs	r3, #32
 8001cb6:	e003      	b.n	8001cc0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	60da      	str	r2, [r3, #12]
}
 8001cce:	bf00      	nop
 8001cd0:	372c      	adds	r7, #44	@ 0x2c
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4013      	ands	r3, r2
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	bf0c      	ite	eq
 8001cf2:	2301      	moveq	r3, #1
 8001cf4:	2300      	movne	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	619a      	str	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <DWT_Clock_Enable>:

/**
 * The function `DWT_Clock_Enable` enables the DWT cycle counter if it is not already enabled.
 */
void DWT_Clock_Enable(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk))
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <DWT_Clock_Enable+0x38>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10e      	bne.n	8001d6e <DWT_Clock_Enable+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Bật Trace
 8001d50:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <DWT_Clock_Enable+0x3c>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4a09      	ldr	r2, [pc, #36]	@ (8001d7c <DWT_Clock_Enable+0x3c>)
 8001d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d5a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;                                // Reset bộ đếm
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <DWT_Clock_Enable+0x38>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Bật bộ đếm chu kỳ
 8001d62:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <DWT_Clock_Enable+0x38>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <DWT_Clock_Enable+0x38>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6013      	str	r3, [r2, #0]
    }
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e0001000 	.word	0xe0001000
 8001d7c:	e000edf0 	.word	0xe000edf0

08001d80 <I2C_Bitbang_Init>:

void I2C_Bitbang_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001d84:	2002      	movs	r0, #2
 8001d86:	f7ff fe41 	bl	8001a0c <LL_AHB1_GRP1_EnableClock>

    /*Configure SCL pin as input first
     * after detecting start condition, then change it to interrupt rising edge (input)
     */

    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f7ff fe3e 	bl	8001a0c <LL_AHB1_GRP1_EnableClock>


    LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE7);
 8001d90:	4915      	ldr	r1, [pc, #84]	@ (8001de8 <I2C_Bitbang_Init+0x68>)
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7ff fe52 	bl	8001a3c <LL_SYSCFG_SetEXTISource>
    LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE6);
 8001d98:	4914      	ldr	r1, [pc, #80]	@ (8001dec <I2C_Bitbang_Init+0x6c>)
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff fe4e 	bl	8001a3c <LL_SYSCFG_SetEXTISource>

    LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_7);
 8001da0:	2080      	movs	r0, #128	@ 0x80
 8001da2:	f7ff fe81 	bl	8001aa8 <LL_EXTI_EnableIT_0_31>
    LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_7);
 8001da6:	2080      	movs	r0, #128	@ 0x80
 8001da8:	f7ff feb6 	bl	8001b18 <LL_EXTI_EnableFallingTrig_0_31>

    /* Configure GPIO*/
    LL_GPIO_SetPinMode(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_MODE_INPUT);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2180      	movs	r1, #128	@ 0x80
 8001db0:	480f      	ldr	r0, [pc, #60]	@ (8001df0 <I2C_Bitbang_Init+0x70>)
 8001db2:	f7ff fec3 	bl	8001b3c <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinPull(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_PULL_NO);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2180      	movs	r1, #128	@ 0x80
 8001dba:	480d      	ldr	r0, [pc, #52]	@ (8001df0 <I2C_Bitbang_Init+0x70>)
 8001dbc:	f7ff ff50 	bl	8001c60 <LL_GPIO_SetPinPull>

    /*Configure GPIO*/
    LL_GPIO_SetPinMode(I2C_GPIO_PORT, I2C_SCL_PIN, LL_GPIO_MODE_INPUT);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2140      	movs	r1, #64	@ 0x40
 8001dc4:	480a      	ldr	r0, [pc, #40]	@ (8001df0 <I2C_Bitbang_Init+0x70>)
 8001dc6:	f7ff feb9 	bl	8001b3c <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinPull(I2C_GPIO_PORT, I2C_SCL_PIN, LL_GPIO_PULL_NO);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2140      	movs	r1, #64	@ 0x40
 8001dce:	4808      	ldr	r0, [pc, #32]	@ (8001df0 <I2C_Bitbang_Init+0x70>)
 8001dd0:	f7ff ff46 	bl	8001c60 <LL_GPIO_SetPinPull>

    NVIC_SetPriority(EXTI9_5_IRQn, 0);
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2017      	movs	r0, #23
 8001dd8:	f7ff fdee 	bl	80019b8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ddc:	2017      	movs	r0, #23
 8001dde:	f7ff fdcd 	bl	800197c <__NVIC_EnableIRQ>
    //                                                   //    LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_6); // Bắt đầu kích hoạt cạnh xuống của SCL

    //    // Bật ngắt EXTI tại NVIC cho line 6
    //    NVIC_SetPriority(EXTI9_5_IRQn, 0);
    //    NVIC_EnableIRQ(EXTI9_5_IRQn);
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	f0000001 	.word	0xf0000001
 8001dec:	0f000001 	.word	0x0f000001
 8001df0:	40020400 	.word	0x40020400

08001df4 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <DWT_Delay_us+0x40>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60fb      	str	r3, [r7, #12]
    microseconds *= (SystemCoreClock / 1000000);
 8001e02:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <DWT_Delay_us+0x44>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <DWT_Delay_us+0x48>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	0c9b      	lsrs	r3, r3, #18
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	fb02 f303 	mul.w	r3, r2, r3
 8001e14:	607b      	str	r3, [r7, #4]
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8001e16:	bf00      	nop
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <DWT_Delay_us+0x40>)
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	1ad2      	subs	r2, r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d3f8      	bcc.n	8001e18 <DWT_Delay_us+0x24>
        ;
}
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e0001000 	.word	0xe0001000
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	431bde83 	.word	0x431bde83

08001e40 <I2C_Read_SDA>:
 * @return The function `I2C_Read_SDA` is returning the state of the SDA pin, which is read using the
 * `LL_GPIO_IsInputPinSet` function. The state is a `uint32_t` value indicating whether the SDA pin is
 * high or low.
 */
__STATIC_INLINE uint32_t I2C_Read_SDA(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
    uint32_t state = LL_GPIO_IsInputPinSet(I2C_GPIO_PORT, I2C_SDA_PIN);
 8001e46:	2180      	movs	r1, #128	@ 0x80
 8001e48:	4804      	ldr	r0, [pc, #16]	@ (8001e5c <I2C_Read_SDA+0x1c>)
 8001e4a:	f7ff ff46 	bl	8001cda <LL_GPIO_IsInputPinSet>
 8001e4e:	6078      	str	r0, [r7, #4]
    return state;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40020400 	.word	0x40020400

08001e60 <I2C_Read_SCL>:
 *
 * @return The function `I2C_Read_SCL` is returning the current state of the I2C SCL (clock) pin. It
 * sets the pin mode to input, reads the state of the pin, and then returns that state.
 */
__STATIC_INLINE uint32_t I2C_Read_SCL(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
    uint32_t state = LL_GPIO_IsInputPinSet(I2C_GPIO_PORT, I2C_SCL_PIN);
 8001e66:	2140      	movs	r1, #64	@ 0x40
 8001e68:	4804      	ldr	r0, [pc, #16]	@ (8001e7c <I2C_Read_SCL+0x1c>)
 8001e6a:	f7ff ff36 	bl	8001cda <LL_GPIO_IsInputPinSet>
 8001e6e:	6078      	str	r0, [r7, #4]
    return state;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40020400 	.word	0x40020400

08001e80 <I2C_Write_Bit>:

__STATIC_INLINE void I2C_Write_Bit(bool bit)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
    if (bit)
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d004      	beq.n	8001e9a <I2C_Write_Bit+0x1a>
    {
        LL_GPIO_SetOutputPin(I2C_GPIO_PORT, I2C_SDA_PIN);
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	4807      	ldr	r0, [pc, #28]	@ (8001eb0 <I2C_Write_Bit+0x30>)
 8001e94:	f7ff ff36 	bl	8001d04 <LL_GPIO_SetOutputPin>
 8001e98:	e003      	b.n	8001ea2 <I2C_Write_Bit+0x22>
    }
    else
    {
        LL_GPIO_ResetOutputPin(I2C_GPIO_PORT, I2C_SDA_PIN);
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <I2C_Write_Bit+0x30>)
 8001e9e:	f7ff ff3f 	bl	8001d20 <LL_GPIO_ResetOutputPin>
    }
    DWT_Delay_us(2); // Đợi ổn định
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	f7ff ffa6 	bl	8001df4 <DWT_Delay_us>
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <I2C_Read_Bit>:

__STATIC_INLINE bool I2C_Read_Bit(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
    unsigned char bit = LL_GPIO_IsInputPinSet(I2C_GPIO_PORT, I2C_SDA_PIN);
 8001eba:	2180      	movs	r1, #128	@ 0x80
 8001ebc:	4807      	ldr	r0, [pc, #28]	@ (8001edc <I2C_Read_Bit+0x28>)
 8001ebe:	f7ff ff0c 	bl	8001cda <LL_GPIO_IsInputPinSet>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
    return bit;
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf14      	ite	ne
 8001ecc:	2301      	movne	r3, #1
 8001ece:	2300      	moveq	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40020400 	.word	0x40020400

08001ee0 <I2C_Send_ACK>:
{
    I2C_Write_Bit(1); // Bit NACK = 1
    DWT_Delay_us(2);
}
__STATIC_INLINE void I2C_Send_ACK(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    I2C_Write_Bit(0); // Bit ACK = 0
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff ffcb 	bl	8001e80 <I2C_Write_Bit>
    //    DWT_Delay_us(2);
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <i2c_set_sda_opendrain>:
    }
    return buffer;
}

__STATIC_INLINE void i2c_set_sda_opendrain()
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
    LL_GPIO_SetPinMode(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_MODE_OUTPUT);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2180      	movs	r1, #128	@ 0x80
 8001ef8:	4807      	ldr	r0, [pc, #28]	@ (8001f18 <i2c_set_sda_opendrain+0x28>)
 8001efa:	f7ff fe1f 	bl	8001b3c <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinOutputType(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_OUTPUT_OPENDRAIN);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2180      	movs	r1, #128	@ 0x80
 8001f02:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <i2c_set_sda_opendrain+0x28>)
 8001f04:	f7ff fe57 	bl	8001bb6 <LL_GPIO_SetPinOutputType>
    LL_GPIO_SetPinSpeed(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8001f08:	2202      	movs	r2, #2
 8001f0a:	2180      	movs	r1, #128	@ 0x80
 8001f0c:	4802      	ldr	r0, [pc, #8]	@ (8001f18 <i2c_set_sda_opendrain+0x28>)
 8001f0e:	f7ff fe6a 	bl	8001be6 <LL_GPIO_SetPinSpeed>
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40020400 	.word	0x40020400

08001f1c <i2c_set_sda_input>:

__STATIC_INLINE void i2c_set_sda_input()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
    LL_GPIO_SetPinMode(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_MODE_INPUT);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2180      	movs	r1, #128	@ 0x80
 8001f24:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <i2c_set_sda_input+0x1c>)
 8001f26:	f7ff fe09 	bl	8001b3c <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinPull(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_PULL_NO);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2180      	movs	r1, #128	@ 0x80
 8001f2e:	4802      	ldr	r0, [pc, #8]	@ (8001f38 <i2c_set_sda_input+0x1c>)
 8001f30:	f7ff fe96 	bl	8001c60 <LL_GPIO_SetPinPull>
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40020400 	.word	0x40020400

08001f3c <i2c_enable_scl_rising>:
{
    LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_7);
}

__STATIC_INLINE void i2c_enable_scl_rising()
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
    LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_6);
 8001f40:	2040      	movs	r0, #64	@ 0x40
 8001f42:	f7ff fdb1 	bl	8001aa8 <LL_EXTI_EnableIT_0_31>
    LL_EXTI_EnableRisingTrig_0_31(LL_EXTI_LINE_6);
 8001f46:	2040      	movs	r0, #64	@ 0x40
 8001f48:	f7ff fdd4 	bl	8001af4 <LL_EXTI_EnableRisingTrig_0_31>
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <check_start_condition>:
unsigned char Slave_Adress = 0x00;
unsigned char device_address = 0x00;
bool start_condtion = false;

void check_start_condition()
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
    if (I2C_Read_SCL() && !I2C_Read_SDA())
 8001f54:	f7ff ff84 	bl	8001e60 <I2C_Read_SCL>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00c      	beq.n	8001f78 <check_start_condition+0x28>
 8001f5e:	f7ff ff6f 	bl	8001e40 <I2C_Read_SDA>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <check_start_condition+0x28>
    {
        start_condtion = true;
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <check_start_condition+0x2c>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
        LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_7);
 8001f6e:	2080      	movs	r0, #128	@ 0x80
 8001f70:	f7ff fdac 	bl	8001acc <LL_EXTI_DisableIT_0_31>
        i2c_enable_scl_rising();
 8001f74:	f7ff ffe2 	bl	8001f3c <i2c_enable_scl_rising>
//        uart_print("Sok\r\n");
        //        DWT_Delay_us(10);
    }
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000076 	.word	0x20000076

08001f80 <I2C_Event_Take>:

void I2C_Event_Take()
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0

    unsigned char bit;
    if (start_condtion)
 8001f86:	4b1e      	ldr	r3, [pc, #120]	@ (8002000 <I2C_Event_Take+0x80>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d033      	beq.n	8001ff6 <I2C_Event_Take+0x76>
    {
        bit = I2C_Read_Bit();
 8001f8e:	f7ff ff91 	bl	8001eb4 <I2C_Read_Bit>
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
        if (count_bit < 8)
 8001f96:	4b1b      	ldr	r3, [pc, #108]	@ (8002004 <I2C_Event_Take+0x84>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b07      	cmp	r3, #7
 8001f9c:	d82b      	bhi.n	8001ff6 <I2C_Event_Take+0x76>
        {
//            uart_printf("%d\r\n", bit);
            Slave_Adress = (Slave_Adress << 1) | bit; // Dịch trái và OR bit
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <I2C_Event_Take+0x88>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	b25a      	sxtb	r2, r3
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <I2C_Event_Take+0x88>)
 8001fb2:	701a      	strb	r2, [r3, #0]
//            uart_printf("0x%02X\r\n", Slave_Adress);
            if (count_bit == 7)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <I2C_Event_Take+0x84>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b07      	cmp	r3, #7
 8001fba:	d116      	bne.n	8001fea <I2C_Event_Take+0x6a>
            {
//                DWT_Delay_us(10);
                i2c_set_sda_opendrain();
 8001fbc:	f7ff ff98 	bl	8001ef0 <i2c_set_sda_opendrain>
                I2C_Send_ACK();
 8001fc0:	f7ff ff8e 	bl	8001ee0 <I2C_Send_ACK>
                i2c_set_sda_input();
 8001fc4:	f7ff ffaa 	bl	8001f1c <i2c_set_sda_input>
                uart_printf("add=0x%02X\r\n",Slave_Adress>>1);
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <I2C_Event_Take+0x88>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480e      	ldr	r0, [pc, #56]	@ (800200c <I2C_Event_Take+0x8c>)
 8001fd4:	f000 f882 	bl	80020dc <uart_printf>
//                uart_printf("new\r\n"); // In ra địa chỉ nhận được
                count_bit = 0;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <I2C_Event_Take+0x84>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
                start_condtion = false;
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <I2C_Event_Take+0x80>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
                LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_6);
 8001fe4:	2040      	movs	r0, #64	@ 0x40
 8001fe6:	f7ff fd71 	bl	8001acc <LL_EXTI_DisableIT_0_31>

            }
            count_bit++;
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <I2C_Event_Take+0x84>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <I2C_Event_Take+0x84>)
 8001ff4:	701a      	strb	r2, [r3, #0]
    //            I2C_Send_ACK();  // Gửi ACK
    //            uart_printf("Device Address: 0x%02X\r\n", device_address);  // In ra device address
    //            count_bit = 0;  // Đặt lại count_bit sau khi nhận xong
    //        }
    //    }
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000076 	.word	0x20000076
 8002004:	20000074 	.word	0x20000074
 8002008:	20000075 	.word	0x20000075
 800200c:	08002a94 	.word	0x08002a94

08002010 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002020:	2b40      	cmp	r3, #64	@ 0x40
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002046:	2b80      	cmp	r3, #128	@ 0x80
 8002048:	bf0c      	ite	eq
 800204a:	2301      	moveq	r3, #1
 800204c:	2300      	movne	r3, #0
 800204e:	b2db      	uxtb	r3, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	605a      	str	r2, [r3, #4]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <uart_print>:
 */

#include "myuart.h"

void uart_print(const char *str)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t length = strlen(str);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7fe f8ab 	bl	80001e0 <strlen>
 800208a:	60b8      	str	r0, [r7, #8]
  for (uint32_t i = 0; i < length; i++)
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e011      	b.n	80020b6 <uart_print+0x3a>
  {
    while (!LL_USART_IsActiveFlag_TXE(USART1))
 8002092:	bf00      	nop
 8002094:	4810      	ldr	r0, [pc, #64]	@ (80020d8 <uart_print+0x5c>)
 8002096:	f7ff ffce 	bl	8002036 <LL_USART_IsActiveFlag_TXE>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f9      	beq.n	8002094 <uart_print+0x18>
      ;
    LL_USART_TransmitData8(USART1, (uint8_t)str[i]);
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4619      	mov	r1, r3
 80020aa:	480b      	ldr	r0, [pc, #44]	@ (80020d8 <uart_print+0x5c>)
 80020ac:	f7ff ffd6 	bl	800205c <LL_USART_TransmitData8>
  for (uint32_t i = 0; i < length; i++)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3e9      	bcc.n	8002092 <uart_print+0x16>
  }
  while (!LL_USART_IsActiveFlag_TC(USART1))
 80020be:	bf00      	nop
 80020c0:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <uart_print+0x5c>)
 80020c2:	f7ff ffa5 	bl	8002010 <LL_USART_IsActiveFlag_TC>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f9      	beq.n	80020c0 <uart_print+0x44>
    ;
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40011000 	.word	0x40011000

080020dc <uart_printf>:

void uart_printf(const char *format, ...)
{
 80020dc:	b40f      	push	{r0, r1, r2, r3}
 80020de:	b580      	push	{r7, lr}
 80020e0:	b0a2      	sub	sp, #136	@ 0x88
 80020e2:	af00      	add	r7, sp, #0
  char buffer[128];
  va_list args;
  va_start(args, format);
 80020e4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80020e8:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), format, args);
 80020ea:	f107 0008 	add.w	r0, r7, #8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80020f4:	2180      	movs	r1, #128	@ 0x80
 80020f6:	f000 f837 	bl	8002168 <vsniprintf>
  va_end(args);
  uart_print(buffer);
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ffbc 	bl	800207c <uart_print>
}
 8002104:	bf00      	nop
 8002106:	3788      	adds	r7, #136	@ 0x88
 8002108:	46bd      	mov	sp, r7
 800210a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800210e:	b004      	add	sp, #16
 8002110:	4770      	bx	lr

08002112 <_vsniprintf_r>:
 8002112:	b530      	push	{r4, r5, lr}
 8002114:	4614      	mov	r4, r2
 8002116:	2c00      	cmp	r4, #0
 8002118:	b09b      	sub	sp, #108	@ 0x6c
 800211a:	4605      	mov	r5, r0
 800211c:	461a      	mov	r2, r3
 800211e:	da05      	bge.n	800212c <_vsniprintf_r+0x1a>
 8002120:	238b      	movs	r3, #139	@ 0x8b
 8002122:	6003      	str	r3, [r0, #0]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	b01b      	add	sp, #108	@ 0x6c
 800212a:	bd30      	pop	{r4, r5, pc}
 800212c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002130:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002134:	bf14      	ite	ne
 8002136:	f104 33ff 	addne.w	r3, r4, #4294967295
 800213a:	4623      	moveq	r3, r4
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	9305      	str	r3, [sp, #20]
 8002140:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002144:	9100      	str	r1, [sp, #0]
 8002146:	9104      	str	r1, [sp, #16]
 8002148:	f8ad 300e 	strh.w	r3, [sp, #14]
 800214c:	4669      	mov	r1, sp
 800214e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8002150:	f000 f998 	bl	8002484 <_svfiprintf_r>
 8002154:	1c43      	adds	r3, r0, #1
 8002156:	bfbc      	itt	lt
 8002158:	238b      	movlt	r3, #139	@ 0x8b
 800215a:	602b      	strlt	r3, [r5, #0]
 800215c:	2c00      	cmp	r4, #0
 800215e:	d0e3      	beq.n	8002128 <_vsniprintf_r+0x16>
 8002160:	9b00      	ldr	r3, [sp, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e7df      	b.n	8002128 <_vsniprintf_r+0x16>

08002168 <vsniprintf>:
 8002168:	b507      	push	{r0, r1, r2, lr}
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	460a      	mov	r2, r1
 8002170:	4601      	mov	r1, r0
 8002172:	4803      	ldr	r0, [pc, #12]	@ (8002180 <vsniprintf+0x18>)
 8002174:	6800      	ldr	r0, [r0, #0]
 8002176:	f7ff ffcc 	bl	8002112 <_vsniprintf_r>
 800217a:	b003      	add	sp, #12
 800217c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002180:	20000004 	.word	0x20000004

08002184 <__errno>:
 8002184:	4b01      	ldr	r3, [pc, #4]	@ (800218c <__errno+0x8>)
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000004 	.word	0x20000004

08002190 <__libc_init_array>:
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	4d0d      	ldr	r5, [pc, #52]	@ (80021c8 <__libc_init_array+0x38>)
 8002194:	4c0d      	ldr	r4, [pc, #52]	@ (80021cc <__libc_init_array+0x3c>)
 8002196:	1b64      	subs	r4, r4, r5
 8002198:	10a4      	asrs	r4, r4, #2
 800219a:	2600      	movs	r6, #0
 800219c:	42a6      	cmp	r6, r4
 800219e:	d109      	bne.n	80021b4 <__libc_init_array+0x24>
 80021a0:	4d0b      	ldr	r5, [pc, #44]	@ (80021d0 <__libc_init_array+0x40>)
 80021a2:	4c0c      	ldr	r4, [pc, #48]	@ (80021d4 <__libc_init_array+0x44>)
 80021a4:	f000 fc66 	bl	8002a74 <_init>
 80021a8:	1b64      	subs	r4, r4, r5
 80021aa:	10a4      	asrs	r4, r4, #2
 80021ac:	2600      	movs	r6, #0
 80021ae:	42a6      	cmp	r6, r4
 80021b0:	d105      	bne.n	80021be <__libc_init_array+0x2e>
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
 80021b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b8:	4798      	blx	r3
 80021ba:	3601      	adds	r6, #1
 80021bc:	e7ee      	b.n	800219c <__libc_init_array+0xc>
 80021be:	f855 3b04 	ldr.w	r3, [r5], #4
 80021c2:	4798      	blx	r3
 80021c4:	3601      	adds	r6, #1
 80021c6:	e7f2      	b.n	80021ae <__libc_init_array+0x1e>
 80021c8:	08002af8 	.word	0x08002af8
 80021cc:	08002af8 	.word	0x08002af8
 80021d0:	08002af8 	.word	0x08002af8
 80021d4:	08002afc 	.word	0x08002afc

080021d8 <__retarget_lock_acquire_recursive>:
 80021d8:	4770      	bx	lr

080021da <__retarget_lock_release_recursive>:
 80021da:	4770      	bx	lr

080021dc <_free_r>:
 80021dc:	b538      	push	{r3, r4, r5, lr}
 80021de:	4605      	mov	r5, r0
 80021e0:	2900      	cmp	r1, #0
 80021e2:	d041      	beq.n	8002268 <_free_r+0x8c>
 80021e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021e8:	1f0c      	subs	r4, r1, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bfb8      	it	lt
 80021ee:	18e4      	addlt	r4, r4, r3
 80021f0:	f000 f8e0 	bl	80023b4 <__malloc_lock>
 80021f4:	4a1d      	ldr	r2, [pc, #116]	@ (800226c <_free_r+0x90>)
 80021f6:	6813      	ldr	r3, [r2, #0]
 80021f8:	b933      	cbnz	r3, 8002208 <_free_r+0x2c>
 80021fa:	6063      	str	r3, [r4, #4]
 80021fc:	6014      	str	r4, [r2, #0]
 80021fe:	4628      	mov	r0, r5
 8002200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002204:	f000 b8dc 	b.w	80023c0 <__malloc_unlock>
 8002208:	42a3      	cmp	r3, r4
 800220a:	d908      	bls.n	800221e <_free_r+0x42>
 800220c:	6820      	ldr	r0, [r4, #0]
 800220e:	1821      	adds	r1, r4, r0
 8002210:	428b      	cmp	r3, r1
 8002212:	bf01      	itttt	eq
 8002214:	6819      	ldreq	r1, [r3, #0]
 8002216:	685b      	ldreq	r3, [r3, #4]
 8002218:	1809      	addeq	r1, r1, r0
 800221a:	6021      	streq	r1, [r4, #0]
 800221c:	e7ed      	b.n	80021fa <_free_r+0x1e>
 800221e:	461a      	mov	r2, r3
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	b10b      	cbz	r3, 8002228 <_free_r+0x4c>
 8002224:	42a3      	cmp	r3, r4
 8002226:	d9fa      	bls.n	800221e <_free_r+0x42>
 8002228:	6811      	ldr	r1, [r2, #0]
 800222a:	1850      	adds	r0, r2, r1
 800222c:	42a0      	cmp	r0, r4
 800222e:	d10b      	bne.n	8002248 <_free_r+0x6c>
 8002230:	6820      	ldr	r0, [r4, #0]
 8002232:	4401      	add	r1, r0
 8002234:	1850      	adds	r0, r2, r1
 8002236:	4283      	cmp	r3, r0
 8002238:	6011      	str	r1, [r2, #0]
 800223a:	d1e0      	bne.n	80021fe <_free_r+0x22>
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	6053      	str	r3, [r2, #4]
 8002242:	4408      	add	r0, r1
 8002244:	6010      	str	r0, [r2, #0]
 8002246:	e7da      	b.n	80021fe <_free_r+0x22>
 8002248:	d902      	bls.n	8002250 <_free_r+0x74>
 800224a:	230c      	movs	r3, #12
 800224c:	602b      	str	r3, [r5, #0]
 800224e:	e7d6      	b.n	80021fe <_free_r+0x22>
 8002250:	6820      	ldr	r0, [r4, #0]
 8002252:	1821      	adds	r1, r4, r0
 8002254:	428b      	cmp	r3, r1
 8002256:	bf04      	itt	eq
 8002258:	6819      	ldreq	r1, [r3, #0]
 800225a:	685b      	ldreq	r3, [r3, #4]
 800225c:	6063      	str	r3, [r4, #4]
 800225e:	bf04      	itt	eq
 8002260:	1809      	addeq	r1, r1, r0
 8002262:	6021      	streq	r1, [r4, #0]
 8002264:	6054      	str	r4, [r2, #4]
 8002266:	e7ca      	b.n	80021fe <_free_r+0x22>
 8002268:	bd38      	pop	{r3, r4, r5, pc}
 800226a:	bf00      	nop
 800226c:	200001bc 	.word	0x200001bc

08002270 <sbrk_aligned>:
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	4e0f      	ldr	r6, [pc, #60]	@ (80022b0 <sbrk_aligned+0x40>)
 8002274:	460c      	mov	r4, r1
 8002276:	6831      	ldr	r1, [r6, #0]
 8002278:	4605      	mov	r5, r0
 800227a:	b911      	cbnz	r1, 8002282 <sbrk_aligned+0x12>
 800227c:	f000 fba6 	bl	80029cc <_sbrk_r>
 8002280:	6030      	str	r0, [r6, #0]
 8002282:	4621      	mov	r1, r4
 8002284:	4628      	mov	r0, r5
 8002286:	f000 fba1 	bl	80029cc <_sbrk_r>
 800228a:	1c43      	adds	r3, r0, #1
 800228c:	d103      	bne.n	8002296 <sbrk_aligned+0x26>
 800228e:	f04f 34ff 	mov.w	r4, #4294967295
 8002292:	4620      	mov	r0, r4
 8002294:	bd70      	pop	{r4, r5, r6, pc}
 8002296:	1cc4      	adds	r4, r0, #3
 8002298:	f024 0403 	bic.w	r4, r4, #3
 800229c:	42a0      	cmp	r0, r4
 800229e:	d0f8      	beq.n	8002292 <sbrk_aligned+0x22>
 80022a0:	1a21      	subs	r1, r4, r0
 80022a2:	4628      	mov	r0, r5
 80022a4:	f000 fb92 	bl	80029cc <_sbrk_r>
 80022a8:	3001      	adds	r0, #1
 80022aa:	d1f2      	bne.n	8002292 <sbrk_aligned+0x22>
 80022ac:	e7ef      	b.n	800228e <sbrk_aligned+0x1e>
 80022ae:	bf00      	nop
 80022b0:	200001b8 	.word	0x200001b8

080022b4 <_malloc_r>:
 80022b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022b8:	1ccd      	adds	r5, r1, #3
 80022ba:	f025 0503 	bic.w	r5, r5, #3
 80022be:	3508      	adds	r5, #8
 80022c0:	2d0c      	cmp	r5, #12
 80022c2:	bf38      	it	cc
 80022c4:	250c      	movcc	r5, #12
 80022c6:	2d00      	cmp	r5, #0
 80022c8:	4606      	mov	r6, r0
 80022ca:	db01      	blt.n	80022d0 <_malloc_r+0x1c>
 80022cc:	42a9      	cmp	r1, r5
 80022ce:	d904      	bls.n	80022da <_malloc_r+0x26>
 80022d0:	230c      	movs	r3, #12
 80022d2:	6033      	str	r3, [r6, #0]
 80022d4:	2000      	movs	r0, #0
 80022d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80023b0 <_malloc_r+0xfc>
 80022de:	f000 f869 	bl	80023b4 <__malloc_lock>
 80022e2:	f8d8 3000 	ldr.w	r3, [r8]
 80022e6:	461c      	mov	r4, r3
 80022e8:	bb44      	cbnz	r4, 800233c <_malloc_r+0x88>
 80022ea:	4629      	mov	r1, r5
 80022ec:	4630      	mov	r0, r6
 80022ee:	f7ff ffbf 	bl	8002270 <sbrk_aligned>
 80022f2:	1c43      	adds	r3, r0, #1
 80022f4:	4604      	mov	r4, r0
 80022f6:	d158      	bne.n	80023aa <_malloc_r+0xf6>
 80022f8:	f8d8 4000 	ldr.w	r4, [r8]
 80022fc:	4627      	mov	r7, r4
 80022fe:	2f00      	cmp	r7, #0
 8002300:	d143      	bne.n	800238a <_malloc_r+0xd6>
 8002302:	2c00      	cmp	r4, #0
 8002304:	d04b      	beq.n	800239e <_malloc_r+0xea>
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	4639      	mov	r1, r7
 800230a:	4630      	mov	r0, r6
 800230c:	eb04 0903 	add.w	r9, r4, r3
 8002310:	f000 fb5c 	bl	80029cc <_sbrk_r>
 8002314:	4581      	cmp	r9, r0
 8002316:	d142      	bne.n	800239e <_malloc_r+0xea>
 8002318:	6821      	ldr	r1, [r4, #0]
 800231a:	1a6d      	subs	r5, r5, r1
 800231c:	4629      	mov	r1, r5
 800231e:	4630      	mov	r0, r6
 8002320:	f7ff ffa6 	bl	8002270 <sbrk_aligned>
 8002324:	3001      	adds	r0, #1
 8002326:	d03a      	beq.n	800239e <_malloc_r+0xea>
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	442b      	add	r3, r5
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	f8d8 3000 	ldr.w	r3, [r8]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	bb62      	cbnz	r2, 8002390 <_malloc_r+0xdc>
 8002336:	f8c8 7000 	str.w	r7, [r8]
 800233a:	e00f      	b.n	800235c <_malloc_r+0xa8>
 800233c:	6822      	ldr	r2, [r4, #0]
 800233e:	1b52      	subs	r2, r2, r5
 8002340:	d420      	bmi.n	8002384 <_malloc_r+0xd0>
 8002342:	2a0b      	cmp	r2, #11
 8002344:	d917      	bls.n	8002376 <_malloc_r+0xc2>
 8002346:	1961      	adds	r1, r4, r5
 8002348:	42a3      	cmp	r3, r4
 800234a:	6025      	str	r5, [r4, #0]
 800234c:	bf18      	it	ne
 800234e:	6059      	strne	r1, [r3, #4]
 8002350:	6863      	ldr	r3, [r4, #4]
 8002352:	bf08      	it	eq
 8002354:	f8c8 1000 	streq.w	r1, [r8]
 8002358:	5162      	str	r2, [r4, r5]
 800235a:	604b      	str	r3, [r1, #4]
 800235c:	4630      	mov	r0, r6
 800235e:	f000 f82f 	bl	80023c0 <__malloc_unlock>
 8002362:	f104 000b 	add.w	r0, r4, #11
 8002366:	1d23      	adds	r3, r4, #4
 8002368:	f020 0007 	bic.w	r0, r0, #7
 800236c:	1ac2      	subs	r2, r0, r3
 800236e:	bf1c      	itt	ne
 8002370:	1a1b      	subne	r3, r3, r0
 8002372:	50a3      	strne	r3, [r4, r2]
 8002374:	e7af      	b.n	80022d6 <_malloc_r+0x22>
 8002376:	6862      	ldr	r2, [r4, #4]
 8002378:	42a3      	cmp	r3, r4
 800237a:	bf0c      	ite	eq
 800237c:	f8c8 2000 	streq.w	r2, [r8]
 8002380:	605a      	strne	r2, [r3, #4]
 8002382:	e7eb      	b.n	800235c <_malloc_r+0xa8>
 8002384:	4623      	mov	r3, r4
 8002386:	6864      	ldr	r4, [r4, #4]
 8002388:	e7ae      	b.n	80022e8 <_malloc_r+0x34>
 800238a:	463c      	mov	r4, r7
 800238c:	687f      	ldr	r7, [r7, #4]
 800238e:	e7b6      	b.n	80022fe <_malloc_r+0x4a>
 8002390:	461a      	mov	r2, r3
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	42a3      	cmp	r3, r4
 8002396:	d1fb      	bne.n	8002390 <_malloc_r+0xdc>
 8002398:	2300      	movs	r3, #0
 800239a:	6053      	str	r3, [r2, #4]
 800239c:	e7de      	b.n	800235c <_malloc_r+0xa8>
 800239e:	230c      	movs	r3, #12
 80023a0:	6033      	str	r3, [r6, #0]
 80023a2:	4630      	mov	r0, r6
 80023a4:	f000 f80c 	bl	80023c0 <__malloc_unlock>
 80023a8:	e794      	b.n	80022d4 <_malloc_r+0x20>
 80023aa:	6005      	str	r5, [r0, #0]
 80023ac:	e7d6      	b.n	800235c <_malloc_r+0xa8>
 80023ae:	bf00      	nop
 80023b0:	200001bc 	.word	0x200001bc

080023b4 <__malloc_lock>:
 80023b4:	4801      	ldr	r0, [pc, #4]	@ (80023bc <__malloc_lock+0x8>)
 80023b6:	f7ff bf0f 	b.w	80021d8 <__retarget_lock_acquire_recursive>
 80023ba:	bf00      	nop
 80023bc:	200001b4 	.word	0x200001b4

080023c0 <__malloc_unlock>:
 80023c0:	4801      	ldr	r0, [pc, #4]	@ (80023c8 <__malloc_unlock+0x8>)
 80023c2:	f7ff bf0a 	b.w	80021da <__retarget_lock_release_recursive>
 80023c6:	bf00      	nop
 80023c8:	200001b4 	.word	0x200001b4

080023cc <__ssputs_r>:
 80023cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023d0:	688e      	ldr	r6, [r1, #8]
 80023d2:	461f      	mov	r7, r3
 80023d4:	42be      	cmp	r6, r7
 80023d6:	680b      	ldr	r3, [r1, #0]
 80023d8:	4682      	mov	sl, r0
 80023da:	460c      	mov	r4, r1
 80023dc:	4690      	mov	r8, r2
 80023de:	d82d      	bhi.n	800243c <__ssputs_r+0x70>
 80023e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80023e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80023e8:	d026      	beq.n	8002438 <__ssputs_r+0x6c>
 80023ea:	6965      	ldr	r5, [r4, #20]
 80023ec:	6909      	ldr	r1, [r1, #16]
 80023ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023f2:	eba3 0901 	sub.w	r9, r3, r1
 80023f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80023fa:	1c7b      	adds	r3, r7, #1
 80023fc:	444b      	add	r3, r9
 80023fe:	106d      	asrs	r5, r5, #1
 8002400:	429d      	cmp	r5, r3
 8002402:	bf38      	it	cc
 8002404:	461d      	movcc	r5, r3
 8002406:	0553      	lsls	r3, r2, #21
 8002408:	d527      	bpl.n	800245a <__ssputs_r+0x8e>
 800240a:	4629      	mov	r1, r5
 800240c:	f7ff ff52 	bl	80022b4 <_malloc_r>
 8002410:	4606      	mov	r6, r0
 8002412:	b360      	cbz	r0, 800246e <__ssputs_r+0xa2>
 8002414:	6921      	ldr	r1, [r4, #16]
 8002416:	464a      	mov	r2, r9
 8002418:	f000 fae8 	bl	80029ec <memcpy>
 800241c:	89a3      	ldrh	r3, [r4, #12]
 800241e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002426:	81a3      	strh	r3, [r4, #12]
 8002428:	6126      	str	r6, [r4, #16]
 800242a:	6165      	str	r5, [r4, #20]
 800242c:	444e      	add	r6, r9
 800242e:	eba5 0509 	sub.w	r5, r5, r9
 8002432:	6026      	str	r6, [r4, #0]
 8002434:	60a5      	str	r5, [r4, #8]
 8002436:	463e      	mov	r6, r7
 8002438:	42be      	cmp	r6, r7
 800243a:	d900      	bls.n	800243e <__ssputs_r+0x72>
 800243c:	463e      	mov	r6, r7
 800243e:	6820      	ldr	r0, [r4, #0]
 8002440:	4632      	mov	r2, r6
 8002442:	4641      	mov	r1, r8
 8002444:	f000 faa8 	bl	8002998 <memmove>
 8002448:	68a3      	ldr	r3, [r4, #8]
 800244a:	1b9b      	subs	r3, r3, r6
 800244c:	60a3      	str	r3, [r4, #8]
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	4433      	add	r3, r6
 8002452:	6023      	str	r3, [r4, #0]
 8002454:	2000      	movs	r0, #0
 8002456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800245a:	462a      	mov	r2, r5
 800245c:	f000 fad4 	bl	8002a08 <_realloc_r>
 8002460:	4606      	mov	r6, r0
 8002462:	2800      	cmp	r0, #0
 8002464:	d1e0      	bne.n	8002428 <__ssputs_r+0x5c>
 8002466:	6921      	ldr	r1, [r4, #16]
 8002468:	4650      	mov	r0, sl
 800246a:	f7ff feb7 	bl	80021dc <_free_r>
 800246e:	230c      	movs	r3, #12
 8002470:	f8ca 3000 	str.w	r3, [sl]
 8002474:	89a3      	ldrh	r3, [r4, #12]
 8002476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800247a:	81a3      	strh	r3, [r4, #12]
 800247c:	f04f 30ff 	mov.w	r0, #4294967295
 8002480:	e7e9      	b.n	8002456 <__ssputs_r+0x8a>
	...

08002484 <_svfiprintf_r>:
 8002484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002488:	4698      	mov	r8, r3
 800248a:	898b      	ldrh	r3, [r1, #12]
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	b09d      	sub	sp, #116	@ 0x74
 8002490:	4607      	mov	r7, r0
 8002492:	460d      	mov	r5, r1
 8002494:	4614      	mov	r4, r2
 8002496:	d510      	bpl.n	80024ba <_svfiprintf_r+0x36>
 8002498:	690b      	ldr	r3, [r1, #16]
 800249a:	b973      	cbnz	r3, 80024ba <_svfiprintf_r+0x36>
 800249c:	2140      	movs	r1, #64	@ 0x40
 800249e:	f7ff ff09 	bl	80022b4 <_malloc_r>
 80024a2:	6028      	str	r0, [r5, #0]
 80024a4:	6128      	str	r0, [r5, #16]
 80024a6:	b930      	cbnz	r0, 80024b6 <_svfiprintf_r+0x32>
 80024a8:	230c      	movs	r3, #12
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	b01d      	add	sp, #116	@ 0x74
 80024b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b6:	2340      	movs	r3, #64	@ 0x40
 80024b8:	616b      	str	r3, [r5, #20]
 80024ba:	2300      	movs	r3, #0
 80024bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80024be:	2320      	movs	r3, #32
 80024c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80024c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80024c8:	2330      	movs	r3, #48	@ 0x30
 80024ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002668 <_svfiprintf_r+0x1e4>
 80024ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80024d2:	f04f 0901 	mov.w	r9, #1
 80024d6:	4623      	mov	r3, r4
 80024d8:	469a      	mov	sl, r3
 80024da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024de:	b10a      	cbz	r2, 80024e4 <_svfiprintf_r+0x60>
 80024e0:	2a25      	cmp	r2, #37	@ 0x25
 80024e2:	d1f9      	bne.n	80024d8 <_svfiprintf_r+0x54>
 80024e4:	ebba 0b04 	subs.w	fp, sl, r4
 80024e8:	d00b      	beq.n	8002502 <_svfiprintf_r+0x7e>
 80024ea:	465b      	mov	r3, fp
 80024ec:	4622      	mov	r2, r4
 80024ee:	4629      	mov	r1, r5
 80024f0:	4638      	mov	r0, r7
 80024f2:	f7ff ff6b 	bl	80023cc <__ssputs_r>
 80024f6:	3001      	adds	r0, #1
 80024f8:	f000 80a7 	beq.w	800264a <_svfiprintf_r+0x1c6>
 80024fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80024fe:	445a      	add	r2, fp
 8002500:	9209      	str	r2, [sp, #36]	@ 0x24
 8002502:	f89a 3000 	ldrb.w	r3, [sl]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 809f 	beq.w	800264a <_svfiprintf_r+0x1c6>
 800250c:	2300      	movs	r3, #0
 800250e:	f04f 32ff 	mov.w	r2, #4294967295
 8002512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002516:	f10a 0a01 	add.w	sl, sl, #1
 800251a:	9304      	str	r3, [sp, #16]
 800251c:	9307      	str	r3, [sp, #28]
 800251e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002522:	931a      	str	r3, [sp, #104]	@ 0x68
 8002524:	4654      	mov	r4, sl
 8002526:	2205      	movs	r2, #5
 8002528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800252c:	484e      	ldr	r0, [pc, #312]	@ (8002668 <_svfiprintf_r+0x1e4>)
 800252e:	f7fd fe5f 	bl	80001f0 <memchr>
 8002532:	9a04      	ldr	r2, [sp, #16]
 8002534:	b9d8      	cbnz	r0, 800256e <_svfiprintf_r+0xea>
 8002536:	06d0      	lsls	r0, r2, #27
 8002538:	bf44      	itt	mi
 800253a:	2320      	movmi	r3, #32
 800253c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002540:	0711      	lsls	r1, r2, #28
 8002542:	bf44      	itt	mi
 8002544:	232b      	movmi	r3, #43	@ 0x2b
 8002546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800254a:	f89a 3000 	ldrb.w	r3, [sl]
 800254e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002550:	d015      	beq.n	800257e <_svfiprintf_r+0xfa>
 8002552:	9a07      	ldr	r2, [sp, #28]
 8002554:	4654      	mov	r4, sl
 8002556:	2000      	movs	r0, #0
 8002558:	f04f 0c0a 	mov.w	ip, #10
 800255c:	4621      	mov	r1, r4
 800255e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002562:	3b30      	subs	r3, #48	@ 0x30
 8002564:	2b09      	cmp	r3, #9
 8002566:	d94b      	bls.n	8002600 <_svfiprintf_r+0x17c>
 8002568:	b1b0      	cbz	r0, 8002598 <_svfiprintf_r+0x114>
 800256a:	9207      	str	r2, [sp, #28]
 800256c:	e014      	b.n	8002598 <_svfiprintf_r+0x114>
 800256e:	eba0 0308 	sub.w	r3, r0, r8
 8002572:	fa09 f303 	lsl.w	r3, r9, r3
 8002576:	4313      	orrs	r3, r2
 8002578:	9304      	str	r3, [sp, #16]
 800257a:	46a2      	mov	sl, r4
 800257c:	e7d2      	b.n	8002524 <_svfiprintf_r+0xa0>
 800257e:	9b03      	ldr	r3, [sp, #12]
 8002580:	1d19      	adds	r1, r3, #4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	9103      	str	r1, [sp, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	bfbb      	ittet	lt
 800258a:	425b      	neglt	r3, r3
 800258c:	f042 0202 	orrlt.w	r2, r2, #2
 8002590:	9307      	strge	r3, [sp, #28]
 8002592:	9307      	strlt	r3, [sp, #28]
 8002594:	bfb8      	it	lt
 8002596:	9204      	strlt	r2, [sp, #16]
 8002598:	7823      	ldrb	r3, [r4, #0]
 800259a:	2b2e      	cmp	r3, #46	@ 0x2e
 800259c:	d10a      	bne.n	80025b4 <_svfiprintf_r+0x130>
 800259e:	7863      	ldrb	r3, [r4, #1]
 80025a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80025a2:	d132      	bne.n	800260a <_svfiprintf_r+0x186>
 80025a4:	9b03      	ldr	r3, [sp, #12]
 80025a6:	1d1a      	adds	r2, r3, #4
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	9203      	str	r2, [sp, #12]
 80025ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80025b0:	3402      	adds	r4, #2
 80025b2:	9305      	str	r3, [sp, #20]
 80025b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002678 <_svfiprintf_r+0x1f4>
 80025b8:	7821      	ldrb	r1, [r4, #0]
 80025ba:	2203      	movs	r2, #3
 80025bc:	4650      	mov	r0, sl
 80025be:	f7fd fe17 	bl	80001f0 <memchr>
 80025c2:	b138      	cbz	r0, 80025d4 <_svfiprintf_r+0x150>
 80025c4:	9b04      	ldr	r3, [sp, #16]
 80025c6:	eba0 000a 	sub.w	r0, r0, sl
 80025ca:	2240      	movs	r2, #64	@ 0x40
 80025cc:	4082      	lsls	r2, r0
 80025ce:	4313      	orrs	r3, r2
 80025d0:	3401      	adds	r4, #1
 80025d2:	9304      	str	r3, [sp, #16]
 80025d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025d8:	4824      	ldr	r0, [pc, #144]	@ (800266c <_svfiprintf_r+0x1e8>)
 80025da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80025de:	2206      	movs	r2, #6
 80025e0:	f7fd fe06 	bl	80001f0 <memchr>
 80025e4:	2800      	cmp	r0, #0
 80025e6:	d036      	beq.n	8002656 <_svfiprintf_r+0x1d2>
 80025e8:	4b21      	ldr	r3, [pc, #132]	@ (8002670 <_svfiprintf_r+0x1ec>)
 80025ea:	bb1b      	cbnz	r3, 8002634 <_svfiprintf_r+0x1b0>
 80025ec:	9b03      	ldr	r3, [sp, #12]
 80025ee:	3307      	adds	r3, #7
 80025f0:	f023 0307 	bic.w	r3, r3, #7
 80025f4:	3308      	adds	r3, #8
 80025f6:	9303      	str	r3, [sp, #12]
 80025f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025fa:	4433      	add	r3, r6
 80025fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80025fe:	e76a      	b.n	80024d6 <_svfiprintf_r+0x52>
 8002600:	fb0c 3202 	mla	r2, ip, r2, r3
 8002604:	460c      	mov	r4, r1
 8002606:	2001      	movs	r0, #1
 8002608:	e7a8      	b.n	800255c <_svfiprintf_r+0xd8>
 800260a:	2300      	movs	r3, #0
 800260c:	3401      	adds	r4, #1
 800260e:	9305      	str	r3, [sp, #20]
 8002610:	4619      	mov	r1, r3
 8002612:	f04f 0c0a 	mov.w	ip, #10
 8002616:	4620      	mov	r0, r4
 8002618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800261c:	3a30      	subs	r2, #48	@ 0x30
 800261e:	2a09      	cmp	r2, #9
 8002620:	d903      	bls.n	800262a <_svfiprintf_r+0x1a6>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0c6      	beq.n	80025b4 <_svfiprintf_r+0x130>
 8002626:	9105      	str	r1, [sp, #20]
 8002628:	e7c4      	b.n	80025b4 <_svfiprintf_r+0x130>
 800262a:	fb0c 2101 	mla	r1, ip, r1, r2
 800262e:	4604      	mov	r4, r0
 8002630:	2301      	movs	r3, #1
 8002632:	e7f0      	b.n	8002616 <_svfiprintf_r+0x192>
 8002634:	ab03      	add	r3, sp, #12
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	462a      	mov	r2, r5
 800263a:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <_svfiprintf_r+0x1f0>)
 800263c:	a904      	add	r1, sp, #16
 800263e:	4638      	mov	r0, r7
 8002640:	f3af 8000 	nop.w
 8002644:	1c42      	adds	r2, r0, #1
 8002646:	4606      	mov	r6, r0
 8002648:	d1d6      	bne.n	80025f8 <_svfiprintf_r+0x174>
 800264a:	89ab      	ldrh	r3, [r5, #12]
 800264c:	065b      	lsls	r3, r3, #25
 800264e:	f53f af2d 	bmi.w	80024ac <_svfiprintf_r+0x28>
 8002652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002654:	e72c      	b.n	80024b0 <_svfiprintf_r+0x2c>
 8002656:	ab03      	add	r3, sp, #12
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	462a      	mov	r2, r5
 800265c:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <_svfiprintf_r+0x1f0>)
 800265e:	a904      	add	r1, sp, #16
 8002660:	4638      	mov	r0, r7
 8002662:	f000 f879 	bl	8002758 <_printf_i>
 8002666:	e7ed      	b.n	8002644 <_svfiprintf_r+0x1c0>
 8002668:	08002abc 	.word	0x08002abc
 800266c:	08002ac6 	.word	0x08002ac6
 8002670:	00000000 	.word	0x00000000
 8002674:	080023cd 	.word	0x080023cd
 8002678:	08002ac2 	.word	0x08002ac2

0800267c <_printf_common>:
 800267c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002680:	4616      	mov	r6, r2
 8002682:	4698      	mov	r8, r3
 8002684:	688a      	ldr	r2, [r1, #8]
 8002686:	690b      	ldr	r3, [r1, #16]
 8002688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800268c:	4293      	cmp	r3, r2
 800268e:	bfb8      	it	lt
 8002690:	4613      	movlt	r3, r2
 8002692:	6033      	str	r3, [r6, #0]
 8002694:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002698:	4607      	mov	r7, r0
 800269a:	460c      	mov	r4, r1
 800269c:	b10a      	cbz	r2, 80026a2 <_printf_common+0x26>
 800269e:	3301      	adds	r3, #1
 80026a0:	6033      	str	r3, [r6, #0]
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	0699      	lsls	r1, r3, #26
 80026a6:	bf42      	ittt	mi
 80026a8:	6833      	ldrmi	r3, [r6, #0]
 80026aa:	3302      	addmi	r3, #2
 80026ac:	6033      	strmi	r3, [r6, #0]
 80026ae:	6825      	ldr	r5, [r4, #0]
 80026b0:	f015 0506 	ands.w	r5, r5, #6
 80026b4:	d106      	bne.n	80026c4 <_printf_common+0x48>
 80026b6:	f104 0a19 	add.w	sl, r4, #25
 80026ba:	68e3      	ldr	r3, [r4, #12]
 80026bc:	6832      	ldr	r2, [r6, #0]
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	42ab      	cmp	r3, r5
 80026c2:	dc26      	bgt.n	8002712 <_printf_common+0x96>
 80026c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80026c8:	6822      	ldr	r2, [r4, #0]
 80026ca:	3b00      	subs	r3, #0
 80026cc:	bf18      	it	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	0692      	lsls	r2, r2, #26
 80026d2:	d42b      	bmi.n	800272c <_printf_common+0xb0>
 80026d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80026d8:	4641      	mov	r1, r8
 80026da:	4638      	mov	r0, r7
 80026dc:	47c8      	blx	r9
 80026de:	3001      	adds	r0, #1
 80026e0:	d01e      	beq.n	8002720 <_printf_common+0xa4>
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	6922      	ldr	r2, [r4, #16]
 80026e6:	f003 0306 	and.w	r3, r3, #6
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	bf02      	ittt	eq
 80026ee:	68e5      	ldreq	r5, [r4, #12]
 80026f0:	6833      	ldreq	r3, [r6, #0]
 80026f2:	1aed      	subeq	r5, r5, r3
 80026f4:	68a3      	ldr	r3, [r4, #8]
 80026f6:	bf0c      	ite	eq
 80026f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026fc:	2500      	movne	r5, #0
 80026fe:	4293      	cmp	r3, r2
 8002700:	bfc4      	itt	gt
 8002702:	1a9b      	subgt	r3, r3, r2
 8002704:	18ed      	addgt	r5, r5, r3
 8002706:	2600      	movs	r6, #0
 8002708:	341a      	adds	r4, #26
 800270a:	42b5      	cmp	r5, r6
 800270c:	d11a      	bne.n	8002744 <_printf_common+0xc8>
 800270e:	2000      	movs	r0, #0
 8002710:	e008      	b.n	8002724 <_printf_common+0xa8>
 8002712:	2301      	movs	r3, #1
 8002714:	4652      	mov	r2, sl
 8002716:	4641      	mov	r1, r8
 8002718:	4638      	mov	r0, r7
 800271a:	47c8      	blx	r9
 800271c:	3001      	adds	r0, #1
 800271e:	d103      	bne.n	8002728 <_printf_common+0xac>
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002728:	3501      	adds	r5, #1
 800272a:	e7c6      	b.n	80026ba <_printf_common+0x3e>
 800272c:	18e1      	adds	r1, r4, r3
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	2030      	movs	r0, #48	@ 0x30
 8002732:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002736:	4422      	add	r2, r4
 8002738:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800273c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002740:	3302      	adds	r3, #2
 8002742:	e7c7      	b.n	80026d4 <_printf_common+0x58>
 8002744:	2301      	movs	r3, #1
 8002746:	4622      	mov	r2, r4
 8002748:	4641      	mov	r1, r8
 800274a:	4638      	mov	r0, r7
 800274c:	47c8      	blx	r9
 800274e:	3001      	adds	r0, #1
 8002750:	d0e6      	beq.n	8002720 <_printf_common+0xa4>
 8002752:	3601      	adds	r6, #1
 8002754:	e7d9      	b.n	800270a <_printf_common+0x8e>
	...

08002758 <_printf_i>:
 8002758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800275c:	7e0f      	ldrb	r7, [r1, #24]
 800275e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002760:	2f78      	cmp	r7, #120	@ 0x78
 8002762:	4691      	mov	r9, r2
 8002764:	4680      	mov	r8, r0
 8002766:	460c      	mov	r4, r1
 8002768:	469a      	mov	sl, r3
 800276a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800276e:	d807      	bhi.n	8002780 <_printf_i+0x28>
 8002770:	2f62      	cmp	r7, #98	@ 0x62
 8002772:	d80a      	bhi.n	800278a <_printf_i+0x32>
 8002774:	2f00      	cmp	r7, #0
 8002776:	f000 80d2 	beq.w	800291e <_printf_i+0x1c6>
 800277a:	2f58      	cmp	r7, #88	@ 0x58
 800277c:	f000 80b9 	beq.w	80028f2 <_printf_i+0x19a>
 8002780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002784:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002788:	e03a      	b.n	8002800 <_printf_i+0xa8>
 800278a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800278e:	2b15      	cmp	r3, #21
 8002790:	d8f6      	bhi.n	8002780 <_printf_i+0x28>
 8002792:	a101      	add	r1, pc, #4	@ (adr r1, 8002798 <_printf_i+0x40>)
 8002794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002798:	080027f1 	.word	0x080027f1
 800279c:	08002805 	.word	0x08002805
 80027a0:	08002781 	.word	0x08002781
 80027a4:	08002781 	.word	0x08002781
 80027a8:	08002781 	.word	0x08002781
 80027ac:	08002781 	.word	0x08002781
 80027b0:	08002805 	.word	0x08002805
 80027b4:	08002781 	.word	0x08002781
 80027b8:	08002781 	.word	0x08002781
 80027bc:	08002781 	.word	0x08002781
 80027c0:	08002781 	.word	0x08002781
 80027c4:	08002905 	.word	0x08002905
 80027c8:	0800282f 	.word	0x0800282f
 80027cc:	080028bf 	.word	0x080028bf
 80027d0:	08002781 	.word	0x08002781
 80027d4:	08002781 	.word	0x08002781
 80027d8:	08002927 	.word	0x08002927
 80027dc:	08002781 	.word	0x08002781
 80027e0:	0800282f 	.word	0x0800282f
 80027e4:	08002781 	.word	0x08002781
 80027e8:	08002781 	.word	0x08002781
 80027ec:	080028c7 	.word	0x080028c7
 80027f0:	6833      	ldr	r3, [r6, #0]
 80027f2:	1d1a      	adds	r2, r3, #4
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6032      	str	r2, [r6, #0]
 80027f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80027fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002800:	2301      	movs	r3, #1
 8002802:	e09d      	b.n	8002940 <_printf_i+0x1e8>
 8002804:	6833      	ldr	r3, [r6, #0]
 8002806:	6820      	ldr	r0, [r4, #0]
 8002808:	1d19      	adds	r1, r3, #4
 800280a:	6031      	str	r1, [r6, #0]
 800280c:	0606      	lsls	r6, r0, #24
 800280e:	d501      	bpl.n	8002814 <_printf_i+0xbc>
 8002810:	681d      	ldr	r5, [r3, #0]
 8002812:	e003      	b.n	800281c <_printf_i+0xc4>
 8002814:	0645      	lsls	r5, r0, #25
 8002816:	d5fb      	bpl.n	8002810 <_printf_i+0xb8>
 8002818:	f9b3 5000 	ldrsh.w	r5, [r3]
 800281c:	2d00      	cmp	r5, #0
 800281e:	da03      	bge.n	8002828 <_printf_i+0xd0>
 8002820:	232d      	movs	r3, #45	@ 0x2d
 8002822:	426d      	negs	r5, r5
 8002824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002828:	4859      	ldr	r0, [pc, #356]	@ (8002990 <_printf_i+0x238>)
 800282a:	230a      	movs	r3, #10
 800282c:	e011      	b.n	8002852 <_printf_i+0xfa>
 800282e:	6821      	ldr	r1, [r4, #0]
 8002830:	6833      	ldr	r3, [r6, #0]
 8002832:	0608      	lsls	r0, r1, #24
 8002834:	f853 5b04 	ldr.w	r5, [r3], #4
 8002838:	d402      	bmi.n	8002840 <_printf_i+0xe8>
 800283a:	0649      	lsls	r1, r1, #25
 800283c:	bf48      	it	mi
 800283e:	b2ad      	uxthmi	r5, r5
 8002840:	2f6f      	cmp	r7, #111	@ 0x6f
 8002842:	4853      	ldr	r0, [pc, #332]	@ (8002990 <_printf_i+0x238>)
 8002844:	6033      	str	r3, [r6, #0]
 8002846:	bf14      	ite	ne
 8002848:	230a      	movne	r3, #10
 800284a:	2308      	moveq	r3, #8
 800284c:	2100      	movs	r1, #0
 800284e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002852:	6866      	ldr	r6, [r4, #4]
 8002854:	60a6      	str	r6, [r4, #8]
 8002856:	2e00      	cmp	r6, #0
 8002858:	bfa2      	ittt	ge
 800285a:	6821      	ldrge	r1, [r4, #0]
 800285c:	f021 0104 	bicge.w	r1, r1, #4
 8002860:	6021      	strge	r1, [r4, #0]
 8002862:	b90d      	cbnz	r5, 8002868 <_printf_i+0x110>
 8002864:	2e00      	cmp	r6, #0
 8002866:	d04b      	beq.n	8002900 <_printf_i+0x1a8>
 8002868:	4616      	mov	r6, r2
 800286a:	fbb5 f1f3 	udiv	r1, r5, r3
 800286e:	fb03 5711 	mls	r7, r3, r1, r5
 8002872:	5dc7      	ldrb	r7, [r0, r7]
 8002874:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002878:	462f      	mov	r7, r5
 800287a:	42bb      	cmp	r3, r7
 800287c:	460d      	mov	r5, r1
 800287e:	d9f4      	bls.n	800286a <_printf_i+0x112>
 8002880:	2b08      	cmp	r3, #8
 8002882:	d10b      	bne.n	800289c <_printf_i+0x144>
 8002884:	6823      	ldr	r3, [r4, #0]
 8002886:	07df      	lsls	r7, r3, #31
 8002888:	d508      	bpl.n	800289c <_printf_i+0x144>
 800288a:	6923      	ldr	r3, [r4, #16]
 800288c:	6861      	ldr	r1, [r4, #4]
 800288e:	4299      	cmp	r1, r3
 8002890:	bfde      	ittt	le
 8002892:	2330      	movle	r3, #48	@ 0x30
 8002894:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002898:	f106 36ff 	addle.w	r6, r6, #4294967295
 800289c:	1b92      	subs	r2, r2, r6
 800289e:	6122      	str	r2, [r4, #16]
 80028a0:	f8cd a000 	str.w	sl, [sp]
 80028a4:	464b      	mov	r3, r9
 80028a6:	aa03      	add	r2, sp, #12
 80028a8:	4621      	mov	r1, r4
 80028aa:	4640      	mov	r0, r8
 80028ac:	f7ff fee6 	bl	800267c <_printf_common>
 80028b0:	3001      	adds	r0, #1
 80028b2:	d14a      	bne.n	800294a <_printf_i+0x1f2>
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	b004      	add	sp, #16
 80028ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	f043 0320 	orr.w	r3, r3, #32
 80028c4:	6023      	str	r3, [r4, #0]
 80028c6:	4833      	ldr	r0, [pc, #204]	@ (8002994 <_printf_i+0x23c>)
 80028c8:	2778      	movs	r7, #120	@ 0x78
 80028ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	6831      	ldr	r1, [r6, #0]
 80028d2:	061f      	lsls	r7, r3, #24
 80028d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80028d8:	d402      	bmi.n	80028e0 <_printf_i+0x188>
 80028da:	065f      	lsls	r7, r3, #25
 80028dc:	bf48      	it	mi
 80028de:	b2ad      	uxthmi	r5, r5
 80028e0:	6031      	str	r1, [r6, #0]
 80028e2:	07d9      	lsls	r1, r3, #31
 80028e4:	bf44      	itt	mi
 80028e6:	f043 0320 	orrmi.w	r3, r3, #32
 80028ea:	6023      	strmi	r3, [r4, #0]
 80028ec:	b11d      	cbz	r5, 80028f6 <_printf_i+0x19e>
 80028ee:	2310      	movs	r3, #16
 80028f0:	e7ac      	b.n	800284c <_printf_i+0xf4>
 80028f2:	4827      	ldr	r0, [pc, #156]	@ (8002990 <_printf_i+0x238>)
 80028f4:	e7e9      	b.n	80028ca <_printf_i+0x172>
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	f023 0320 	bic.w	r3, r3, #32
 80028fc:	6023      	str	r3, [r4, #0]
 80028fe:	e7f6      	b.n	80028ee <_printf_i+0x196>
 8002900:	4616      	mov	r6, r2
 8002902:	e7bd      	b.n	8002880 <_printf_i+0x128>
 8002904:	6833      	ldr	r3, [r6, #0]
 8002906:	6825      	ldr	r5, [r4, #0]
 8002908:	6961      	ldr	r1, [r4, #20]
 800290a:	1d18      	adds	r0, r3, #4
 800290c:	6030      	str	r0, [r6, #0]
 800290e:	062e      	lsls	r6, r5, #24
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	d501      	bpl.n	8002918 <_printf_i+0x1c0>
 8002914:	6019      	str	r1, [r3, #0]
 8002916:	e002      	b.n	800291e <_printf_i+0x1c6>
 8002918:	0668      	lsls	r0, r5, #25
 800291a:	d5fb      	bpl.n	8002914 <_printf_i+0x1bc>
 800291c:	8019      	strh	r1, [r3, #0]
 800291e:	2300      	movs	r3, #0
 8002920:	6123      	str	r3, [r4, #16]
 8002922:	4616      	mov	r6, r2
 8002924:	e7bc      	b.n	80028a0 <_printf_i+0x148>
 8002926:	6833      	ldr	r3, [r6, #0]
 8002928:	1d1a      	adds	r2, r3, #4
 800292a:	6032      	str	r2, [r6, #0]
 800292c:	681e      	ldr	r6, [r3, #0]
 800292e:	6862      	ldr	r2, [r4, #4]
 8002930:	2100      	movs	r1, #0
 8002932:	4630      	mov	r0, r6
 8002934:	f7fd fc5c 	bl	80001f0 <memchr>
 8002938:	b108      	cbz	r0, 800293e <_printf_i+0x1e6>
 800293a:	1b80      	subs	r0, r0, r6
 800293c:	6060      	str	r0, [r4, #4]
 800293e:	6863      	ldr	r3, [r4, #4]
 8002940:	6123      	str	r3, [r4, #16]
 8002942:	2300      	movs	r3, #0
 8002944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002948:	e7aa      	b.n	80028a0 <_printf_i+0x148>
 800294a:	6923      	ldr	r3, [r4, #16]
 800294c:	4632      	mov	r2, r6
 800294e:	4649      	mov	r1, r9
 8002950:	4640      	mov	r0, r8
 8002952:	47d0      	blx	sl
 8002954:	3001      	adds	r0, #1
 8002956:	d0ad      	beq.n	80028b4 <_printf_i+0x15c>
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	079b      	lsls	r3, r3, #30
 800295c:	d413      	bmi.n	8002986 <_printf_i+0x22e>
 800295e:	68e0      	ldr	r0, [r4, #12]
 8002960:	9b03      	ldr	r3, [sp, #12]
 8002962:	4298      	cmp	r0, r3
 8002964:	bfb8      	it	lt
 8002966:	4618      	movlt	r0, r3
 8002968:	e7a6      	b.n	80028b8 <_printf_i+0x160>
 800296a:	2301      	movs	r3, #1
 800296c:	4632      	mov	r2, r6
 800296e:	4649      	mov	r1, r9
 8002970:	4640      	mov	r0, r8
 8002972:	47d0      	blx	sl
 8002974:	3001      	adds	r0, #1
 8002976:	d09d      	beq.n	80028b4 <_printf_i+0x15c>
 8002978:	3501      	adds	r5, #1
 800297a:	68e3      	ldr	r3, [r4, #12]
 800297c:	9903      	ldr	r1, [sp, #12]
 800297e:	1a5b      	subs	r3, r3, r1
 8002980:	42ab      	cmp	r3, r5
 8002982:	dcf2      	bgt.n	800296a <_printf_i+0x212>
 8002984:	e7eb      	b.n	800295e <_printf_i+0x206>
 8002986:	2500      	movs	r5, #0
 8002988:	f104 0619 	add.w	r6, r4, #25
 800298c:	e7f5      	b.n	800297a <_printf_i+0x222>
 800298e:	bf00      	nop
 8002990:	08002acd 	.word	0x08002acd
 8002994:	08002ade 	.word	0x08002ade

08002998 <memmove>:
 8002998:	4288      	cmp	r0, r1
 800299a:	b510      	push	{r4, lr}
 800299c:	eb01 0402 	add.w	r4, r1, r2
 80029a0:	d902      	bls.n	80029a8 <memmove+0x10>
 80029a2:	4284      	cmp	r4, r0
 80029a4:	4623      	mov	r3, r4
 80029a6:	d807      	bhi.n	80029b8 <memmove+0x20>
 80029a8:	1e43      	subs	r3, r0, #1
 80029aa:	42a1      	cmp	r1, r4
 80029ac:	d008      	beq.n	80029c0 <memmove+0x28>
 80029ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029b6:	e7f8      	b.n	80029aa <memmove+0x12>
 80029b8:	4402      	add	r2, r0
 80029ba:	4601      	mov	r1, r0
 80029bc:	428a      	cmp	r2, r1
 80029be:	d100      	bne.n	80029c2 <memmove+0x2a>
 80029c0:	bd10      	pop	{r4, pc}
 80029c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029ca:	e7f7      	b.n	80029bc <memmove+0x24>

080029cc <_sbrk_r>:
 80029cc:	b538      	push	{r3, r4, r5, lr}
 80029ce:	4d06      	ldr	r5, [pc, #24]	@ (80029e8 <_sbrk_r+0x1c>)
 80029d0:	2300      	movs	r3, #0
 80029d2:	4604      	mov	r4, r0
 80029d4:	4608      	mov	r0, r1
 80029d6:	602b      	str	r3, [r5, #0]
 80029d8:	f7fe f954 	bl	8000c84 <_sbrk>
 80029dc:	1c43      	adds	r3, r0, #1
 80029de:	d102      	bne.n	80029e6 <_sbrk_r+0x1a>
 80029e0:	682b      	ldr	r3, [r5, #0]
 80029e2:	b103      	cbz	r3, 80029e6 <_sbrk_r+0x1a>
 80029e4:	6023      	str	r3, [r4, #0]
 80029e6:	bd38      	pop	{r3, r4, r5, pc}
 80029e8:	200001b0 	.word	0x200001b0

080029ec <memcpy>:
 80029ec:	440a      	add	r2, r1
 80029ee:	4291      	cmp	r1, r2
 80029f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80029f4:	d100      	bne.n	80029f8 <memcpy+0xc>
 80029f6:	4770      	bx	lr
 80029f8:	b510      	push	{r4, lr}
 80029fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a02:	4291      	cmp	r1, r2
 8002a04:	d1f9      	bne.n	80029fa <memcpy+0xe>
 8002a06:	bd10      	pop	{r4, pc}

08002a08 <_realloc_r>:
 8002a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a0c:	4680      	mov	r8, r0
 8002a0e:	4615      	mov	r5, r2
 8002a10:	460c      	mov	r4, r1
 8002a12:	b921      	cbnz	r1, 8002a1e <_realloc_r+0x16>
 8002a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a18:	4611      	mov	r1, r2
 8002a1a:	f7ff bc4b 	b.w	80022b4 <_malloc_r>
 8002a1e:	b92a      	cbnz	r2, 8002a2c <_realloc_r+0x24>
 8002a20:	f7ff fbdc 	bl	80021dc <_free_r>
 8002a24:	2400      	movs	r4, #0
 8002a26:	4620      	mov	r0, r4
 8002a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a2c:	f000 f81a 	bl	8002a64 <_malloc_usable_size_r>
 8002a30:	4285      	cmp	r5, r0
 8002a32:	4606      	mov	r6, r0
 8002a34:	d802      	bhi.n	8002a3c <_realloc_r+0x34>
 8002a36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002a3a:	d8f4      	bhi.n	8002a26 <_realloc_r+0x1e>
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	4640      	mov	r0, r8
 8002a40:	f7ff fc38 	bl	80022b4 <_malloc_r>
 8002a44:	4607      	mov	r7, r0
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d0ec      	beq.n	8002a24 <_realloc_r+0x1c>
 8002a4a:	42b5      	cmp	r5, r6
 8002a4c:	462a      	mov	r2, r5
 8002a4e:	4621      	mov	r1, r4
 8002a50:	bf28      	it	cs
 8002a52:	4632      	movcs	r2, r6
 8002a54:	f7ff ffca 	bl	80029ec <memcpy>
 8002a58:	4621      	mov	r1, r4
 8002a5a:	4640      	mov	r0, r8
 8002a5c:	f7ff fbbe 	bl	80021dc <_free_r>
 8002a60:	463c      	mov	r4, r7
 8002a62:	e7e0      	b.n	8002a26 <_realloc_r+0x1e>

08002a64 <_malloc_usable_size_r>:
 8002a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a68:	1f18      	subs	r0, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bfbc      	itt	lt
 8002a6e:	580b      	ldrlt	r3, [r1, r0]
 8002a70:	18c0      	addlt	r0, r0, r3
 8002a72:	4770      	bx	lr

08002a74 <_init>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	bf00      	nop
 8002a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7a:	bc08      	pop	{r3}
 8002a7c:	469e      	mov	lr, r3
 8002a7e:	4770      	bx	lr

08002a80 <_fini>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	bf00      	nop
 8002a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a86:	bc08      	pop	{r3}
 8002a88:	469e      	mov	lr, r3
 8002a8a:	4770      	bx	lr
